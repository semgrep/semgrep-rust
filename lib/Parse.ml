(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

let debug = ref false

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_rust"

let ts_parser = create_parser ()

let parse_source_string ?src_file contents =
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "line_comment";
  "block_comment";
]

let children_regexps : (string * Run.exp option) list = [
  "integer_literal", None;
  "shebang", None;
  "char_literal", None;
  "variadic_parameter", None;
  "empty_type", None;
  "escape_sequence", None;
  "ellipsis", None;
  "self", None;
  "tok_prec_p1_lt", None;
  "block_comment", None;
  "identifier", None;
  "boolean_literal",
  Some (
    Alt [|
      Token (Literal "true");
      Token (Literal "false");
    |];
  );
  "imm_tok_dquot", None;
  "fragment_specifier",
  Some (
    Alt [|
      Token (Literal "block");
      Token (Literal "expr");
      Token (Literal "ident");
      Token (Literal "item");
      Token (Literal "lifetime");
      Token (Literal "literal");
      Token (Literal "meta");
      Token (Literal "pat");
      Token (Literal "path");
      Token (Literal "stmt");
      Token (Literal "tt");
      Token (Literal "ty");
      Token (Literal "vis");
    |];
  );
  "empty_statement", None;
  "string_content", None;
  "float_literal", None;
  "pat_eeda0f5", None;
  "unit_expression",
  Some (
    Seq [
      Token (Literal "(");
      Token (Literal ")");
    ];
  );
  "unit_type",
  Some (
    Seq [
      Token (Literal "(");
      Token (Literal ")");
    ];
  );
  "metavariable", None;
  "line_comment", None;
  "super", None;
  "raw_string_literal", None;
  "pat_1e84e62", None;
  "crate", None;
  "mutable_specifier", None;
  "remaining_field_pattern", None;
  "label",
  Some (
    Seq [
      Token (Literal "'");
      Token (Name "identifier");
    ];
  );
  "lifetime",
  Some (
    Seq [
      Token (Literal "'");
      Token (Name "identifier");
    ];
  );
  "negative_literal",
  Some (
    Seq [
      Token (Literal "-");
      Alt [|
        Token (Name "integer_literal");
        Token (Name "float_literal");
      |];
    ];
  );
  "string_literal",
  Some (
    Seq [
      Token (Name "pat_eeda0f5");
      Repeat (
        Alt [|
          Token (Name "escape_sequence");
          Token (Name "string_content");
        |];
      );
      Token (Name "imm_tok_dquot");
    ];
  );
  "token_binding_pattern",
  Some (
    Seq [
      Token (Name "metavariable");
      Token (Literal ":");
      Token (Name "fragment_specifier");
    ];
  );
  "continue_expression",
  Some (
    Seq [
      Token (Literal "continue");
      Opt (
        Token (Name "label");
      );
    ];
  );
  "self_parameter",
  Some (
    Seq [
      Opt (
        Token (Literal "&");
      );
      Opt (
        Token (Name "lifetime");
      );
      Opt (
        Token (Name "mutable_specifier");
      );
      Token (Name "self");
    ];
  );
  "for_lifetimes",
  Some (
    Seq [
      Token (Literal "for");
      Token (Literal "<");
      Token (Name "lifetime");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "lifetime");
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal ">");
    ];
  );
  "literal",
  Some (
    Alt [|
      Token (Name "string_literal");
      Token (Name "raw_string_literal");
      Token (Name "char_literal");
      Token (Name "boolean_literal");
      Token (Name "integer_literal");
      Token (Name "float_literal");
    |];
  );
  "literal_pattern",
  Some (
    Alt [|
      Token (Name "string_literal");
      Token (Name "raw_string_literal");
      Token (Name "char_literal");
      Token (Name "boolean_literal");
      Token (Name "integer_literal");
      Token (Name "float_literal");
      Token (Name "negative_literal");
    |];
  );
  "extern_modifier",
  Some (
    Seq [
      Token (Literal "extern");
      Opt (
        Token (Name "string_literal");
      );
    ];
  );
  "token_pattern",
  Some (
    Alt [|
      Token (Name "token_tree_pattern");
      Token (Name "token_repetition_pattern");
      Token (Name "token_binding_pattern");
      Token (Name "metavariable");
      Alt [|
        Alt [|
          Token (Name "literal");
          Token (Name "identifier");
          Token (Name "mutable_specifier");
          Token (Name "self");
          Token (Name "super");
          Token (Name "crate");
          Alt [|
            Token (Literal "u8");
            Token (Literal "i8");
            Token (Literal "u16");
            Token (Literal "i16");
            Token (Literal "u32");
            Token (Literal "i32");
            Token (Literal "u64");
            Token (Literal "i64");
            Token (Literal "u128");
            Token (Literal "i128");
            Token (Literal "isize");
            Token (Literal "usize");
            Token (Literal "f32");
            Token (Literal "f64");
            Token (Literal "bool");
            Token (Literal "str");
            Token (Literal "char");
          |];
          Repeat1 (
            Alt [|
              Token (Literal "/");
              Token (Literal "_");
              Token (Literal "\\");
              Token (Literal "-");
              Token (Literal "=");
              Token (Literal "->");
              Token (Literal ",");
              Token (Literal ";");
              Token (Literal ":");
              Token (Literal "::");
              Token (Literal "!");
              Token (Literal "?");
              Token (Literal ".");
              Token (Literal "@");
              Token (Literal "*");
              Token (Literal "&");
              Token (Literal "#");
              Token (Literal "%");
              Token (Literal "^");
              Token (Literal "+");
              Token (Literal "<");
              Token (Literal ">");
              Token (Literal "|");
              Token (Literal "~");
            |];
          );
          Token (Literal "'");
          Token (Literal "as");
          Token (Literal "async");
          Token (Literal "await");
          Token (Literal "break");
          Token (Literal "const");
          Token (Literal "continue");
          Token (Literal "default");
          Token (Literal "enum");
          Token (Literal "fn");
          Token (Literal "for");
          Token (Literal "if");
          Token (Literal "impl");
          Token (Literal "let");
          Token (Literal "loop");
          Token (Literal "match");
          Token (Literal "mod");
          Token (Literal "pub");
          Token (Literal "return");
          Token (Literal "static");
          Token (Literal "struct");
          Token (Literal "trait");
          Token (Literal "type");
          Token (Literal "union");
          Token (Literal "unsafe");
          Token (Literal "use");
          Token (Literal "where");
          Token (Literal "while");
        |];
        Token (Name "ellipsis");
      |];
    |];
  );
  "token_repetition_pattern",
  Some (
    Seq [
      Token (Literal "$");
      Token (Literal "(");
      Repeat (
        Token (Name "token_pattern");
      );
      Token (Literal ")");
      Opt (
        Token (Name "pat_1e84e62");
      );
      Alt [|
        Token (Literal "+");
        Token (Literal "*");
        Token (Literal "?");
      |];
    ];
  );
  "token_tree_pattern",
  Some (
    Alt [|
      Seq [
        Token (Literal "(");
        Repeat (
          Token (Name "token_pattern");
        );
        Token (Literal ")");
      ];
      Seq [
        Token (Literal "[");
        Repeat (
          Token (Name "token_pattern");
        );
        Token (Literal "]");
      ];
      Seq [
        Token (Literal "{");
        Repeat (
          Token (Name "token_pattern");
        );
        Token (Literal "}");
      ];
    |];
  );
  "token_repetition",
  Some (
    Seq [
      Token (Literal "$");
      Token (Literal "(");
      Repeat (
        Alt [|
          Token (Name "token_tree");
          Token (Name "token_repetition");
          Token (Name "metavariable");
          Alt [|
            Alt [|
              Token (Name "literal");
              Token (Name "identifier");
              Token (Name "mutable_specifier");
              Token (Name "self");
              Token (Name "super");
              Token (Name "crate");
              Alt [|
                Token (Literal "u8");
                Token (Literal "i8");
                Token (Literal "u16");
                Token (Literal "i16");
                Token (Literal "u32");
                Token (Literal "i32");
                Token (Literal "u64");
                Token (Literal "i64");
                Token (Literal "u128");
                Token (Literal "i128");
                Token (Literal "isize");
                Token (Literal "usize");
                Token (Literal "f32");
                Token (Literal "f64");
                Token (Literal "bool");
                Token (Literal "str");
                Token (Literal "char");
              |];
              Repeat1 (
                Alt [|
                  Token (Literal "/");
                  Token (Literal "_");
                  Token (Literal "\\");
                  Token (Literal "-");
                  Token (Literal "=");
                  Token (Literal "->");
                  Token (Literal ",");
                  Token (Literal ";");
                  Token (Literal ":");
                  Token (Literal "::");
                  Token (Literal "!");
                  Token (Literal "?");
                  Token (Literal ".");
                  Token (Literal "@");
                  Token (Literal "*");
                  Token (Literal "&");
                  Token (Literal "#");
                  Token (Literal "%");
                  Token (Literal "^");
                  Token (Literal "+");
                  Token (Literal "<");
                  Token (Literal ">");
                  Token (Literal "|");
                  Token (Literal "~");
                |];
              );
              Token (Literal "'");
              Token (Literal "as");
              Token (Literal "async");
              Token (Literal "await");
              Token (Literal "break");
              Token (Literal "const");
              Token (Literal "continue");
              Token (Literal "default");
              Token (Literal "enum");
              Token (Literal "fn");
              Token (Literal "for");
              Token (Literal "if");
              Token (Literal "impl");
              Token (Literal "let");
              Token (Literal "loop");
              Token (Literal "match");
              Token (Literal "mod");
              Token (Literal "pub");
              Token (Literal "return");
              Token (Literal "static");
              Token (Literal "struct");
              Token (Literal "trait");
              Token (Literal "type");
              Token (Literal "union");
              Token (Literal "unsafe");
              Token (Literal "use");
              Token (Literal "where");
              Token (Literal "while");
            |];
            Token (Name "ellipsis");
          |];
        |];
      );
      Token (Literal ")");
      Opt (
        Token (Name "pat_1e84e62");
      );
      Alt [|
        Token (Literal "+");
        Token (Literal "*");
        Token (Literal "?");
      |];
    ];
  );
  "token_tree",
  Some (
    Alt [|
      Seq [
        Token (Literal "(");
        Repeat (
          Alt [|
            Token (Name "token_tree");
            Token (Name "token_repetition");
            Token (Name "metavariable");
            Alt [|
              Alt [|
                Token (Name "literal");
                Token (Name "identifier");
                Token (Name "mutable_specifier");
                Token (Name "self");
                Token (Name "super");
                Token (Name "crate");
                Alt [|
                  Token (Literal "u8");
                  Token (Literal "i8");
                  Token (Literal "u16");
                  Token (Literal "i16");
                  Token (Literal "u32");
                  Token (Literal "i32");
                  Token (Literal "u64");
                  Token (Literal "i64");
                  Token (Literal "u128");
                  Token (Literal "i128");
                  Token (Literal "isize");
                  Token (Literal "usize");
                  Token (Literal "f32");
                  Token (Literal "f64");
                  Token (Literal "bool");
                  Token (Literal "str");
                  Token (Literal "char");
                |];
                Repeat1 (
                  Alt [|
                    Token (Literal "/");
                    Token (Literal "_");
                    Token (Literal "\\");
                    Token (Literal "-");
                    Token (Literal "=");
                    Token (Literal "->");
                    Token (Literal ",");
                    Token (Literal ";");
                    Token (Literal ":");
                    Token (Literal "::");
                    Token (Literal "!");
                    Token (Literal "?");
                    Token (Literal ".");
                    Token (Literal "@");
                    Token (Literal "*");
                    Token (Literal "&");
                    Token (Literal "#");
                    Token (Literal "%");
                    Token (Literal "^");
                    Token (Literal "+");
                    Token (Literal "<");
                    Token (Literal ">");
                    Token (Literal "|");
                    Token (Literal "~");
                  |];
                );
                Token (Literal "'");
                Token (Literal "as");
                Token (Literal "async");
                Token (Literal "await");
                Token (Literal "break");
                Token (Literal "const");
                Token (Literal "continue");
                Token (Literal "default");
                Token (Literal "enum");
                Token (Literal "fn");
                Token (Literal "for");
                Token (Literal "if");
                Token (Literal "impl");
                Token (Literal "let");
                Token (Literal "loop");
                Token (Literal "match");
                Token (Literal "mod");
                Token (Literal "pub");
                Token (Literal "return");
                Token (Literal "static");
                Token (Literal "struct");
                Token (Literal "trait");
                Token (Literal "type");
                Token (Literal "union");
                Token (Literal "unsafe");
                Token (Literal "use");
                Token (Literal "where");
                Token (Literal "while");
              |];
              Token (Name "ellipsis");
            |];
          |];
        );
        Token (Literal ")");
      ];
      Seq [
        Token (Literal "[");
        Repeat (
          Alt [|
            Token (Name "token_tree");
            Token (Name "token_repetition");
            Token (Name "metavariable");
            Alt [|
              Alt [|
                Token (Name "literal");
                Token (Name "identifier");
                Token (Name "mutable_specifier");
                Token (Name "self");
                Token (Name "super");
                Token (Name "crate");
                Alt [|
                  Token (Literal "u8");
                  Token (Literal "i8");
                  Token (Literal "u16");
                  Token (Literal "i16");
                  Token (Literal "u32");
                  Token (Literal "i32");
                  Token (Literal "u64");
                  Token (Literal "i64");
                  Token (Literal "u128");
                  Token (Literal "i128");
                  Token (Literal "isize");
                  Token (Literal "usize");
                  Token (Literal "f32");
                  Token (Literal "f64");
                  Token (Literal "bool");
                  Token (Literal "str");
                  Token (Literal "char");
                |];
                Repeat1 (
                  Alt [|
                    Token (Literal "/");
                    Token (Literal "_");
                    Token (Literal "\\");
                    Token (Literal "-");
                    Token (Literal "=");
                    Token (Literal "->");
                    Token (Literal ",");
                    Token (Literal ";");
                    Token (Literal ":");
                    Token (Literal "::");
                    Token (Literal "!");
                    Token (Literal "?");
                    Token (Literal ".");
                    Token (Literal "@");
                    Token (Literal "*");
                    Token (Literal "&");
                    Token (Literal "#");
                    Token (Literal "%");
                    Token (Literal "^");
                    Token (Literal "+");
                    Token (Literal "<");
                    Token (Literal ">");
                    Token (Literal "|");
                    Token (Literal "~");
                  |];
                );
                Token (Literal "'");
                Token (Literal "as");
                Token (Literal "async");
                Token (Literal "await");
                Token (Literal "break");
                Token (Literal "const");
                Token (Literal "continue");
                Token (Literal "default");
                Token (Literal "enum");
                Token (Literal "fn");
                Token (Literal "for");
                Token (Literal "if");
                Token (Literal "impl");
                Token (Literal "let");
                Token (Literal "loop");
                Token (Literal "match");
                Token (Literal "mod");
                Token (Literal "pub");
                Token (Literal "return");
                Token (Literal "static");
                Token (Literal "struct");
                Token (Literal "trait");
                Token (Literal "type");
                Token (Literal "union");
                Token (Literal "unsafe");
                Token (Literal "use");
                Token (Literal "where");
                Token (Literal "while");
              |];
              Token (Name "ellipsis");
            |];
          |];
        );
        Token (Literal "]");
      ];
      Seq [
        Token (Literal "{");
        Repeat (
          Alt [|
            Token (Name "token_tree");
            Token (Name "token_repetition");
            Token (Name "metavariable");
            Alt [|
              Alt [|
                Token (Name "literal");
                Token (Name "identifier");
                Token (Name "mutable_specifier");
                Token (Name "self");
                Token (Name "super");
                Token (Name "crate");
                Alt [|
                  Token (Literal "u8");
                  Token (Literal "i8");
                  Token (Literal "u16");
                  Token (Literal "i16");
                  Token (Literal "u32");
                  Token (Literal "i32");
                  Token (Literal "u64");
                  Token (Literal "i64");
                  Token (Literal "u128");
                  Token (Literal "i128");
                  Token (Literal "isize");
                  Token (Literal "usize");
                  Token (Literal "f32");
                  Token (Literal "f64");
                  Token (Literal "bool");
                  Token (Literal "str");
                  Token (Literal "char");
                |];
                Repeat1 (
                  Alt [|
                    Token (Literal "/");
                    Token (Literal "_");
                    Token (Literal "\\");
                    Token (Literal "-");
                    Token (Literal "=");
                    Token (Literal "->");
                    Token (Literal ",");
                    Token (Literal ";");
                    Token (Literal ":");
                    Token (Literal "::");
                    Token (Literal "!");
                    Token (Literal "?");
                    Token (Literal ".");
                    Token (Literal "@");
                    Token (Literal "*");
                    Token (Literal "&");
                    Token (Literal "#");
                    Token (Literal "%");
                    Token (Literal "^");
                    Token (Literal "+");
                    Token (Literal "<");
                    Token (Literal ">");
                    Token (Literal "|");
                    Token (Literal "~");
                  |];
                );
                Token (Literal "'");
                Token (Literal "as");
                Token (Literal "async");
                Token (Literal "await");
                Token (Literal "break");
                Token (Literal "const");
                Token (Literal "continue");
                Token (Literal "default");
                Token (Literal "enum");
                Token (Literal "fn");
                Token (Literal "for");
                Token (Literal "if");
                Token (Literal "impl");
                Token (Literal "let");
                Token (Literal "loop");
                Token (Literal "match");
                Token (Literal "mod");
                Token (Literal "pub");
                Token (Literal "return");
                Token (Literal "static");
                Token (Literal "struct");
                Token (Literal "trait");
                Token (Literal "type");
                Token (Literal "union");
                Token (Literal "unsafe");
                Token (Literal "use");
                Token (Literal "where");
                Token (Literal "while");
              |];
              Token (Name "ellipsis");
            |];
          |];
        );
        Token (Literal "}");
      ];
    |];
  );
  "non_delim_token",
  Some (
    Alt [|
      Alt [|
        Alt [|
          Token (Name "literal");
          Token (Name "identifier");
          Token (Name "mutable_specifier");
          Token (Name "self");
          Token (Name "super");
          Token (Name "crate");
          Alt [|
            Token (Literal "u8");
            Token (Literal "i8");
            Token (Literal "u16");
            Token (Literal "i16");
            Token (Literal "u32");
            Token (Literal "i32");
            Token (Literal "u64");
            Token (Literal "i64");
            Token (Literal "u128");
            Token (Literal "i128");
            Token (Literal "isize");
            Token (Literal "usize");
            Token (Literal "f32");
            Token (Literal "f64");
            Token (Literal "bool");
            Token (Literal "str");
            Token (Literal "char");
          |];
          Repeat1 (
            Alt [|
              Token (Literal "/");
              Token (Literal "_");
              Token (Literal "\\");
              Token (Literal "-");
              Token (Literal "=");
              Token (Literal "->");
              Token (Literal ",");
              Token (Literal ";");
              Token (Literal ":");
              Token (Literal "::");
              Token (Literal "!");
              Token (Literal "?");
              Token (Literal ".");
              Token (Literal "@");
              Token (Literal "*");
              Token (Literal "&");
              Token (Literal "#");
              Token (Literal "%");
              Token (Literal "^");
              Token (Literal "+");
              Token (Literal "<");
              Token (Literal ">");
              Token (Literal "|");
              Token (Literal "~");
            |];
          );
          Token (Literal "'");
          Token (Literal "as");
          Token (Literal "async");
          Token (Literal "await");
          Token (Literal "break");
          Token (Literal "const");
          Token (Literal "continue");
          Token (Literal "default");
          Token (Literal "enum");
          Token (Literal "fn");
          Token (Literal "for");
          Token (Literal "if");
          Token (Literal "impl");
          Token (Literal "let");
          Token (Literal "loop");
          Token (Literal "match");
          Token (Literal "mod");
          Token (Literal "pub");
          Token (Literal "return");
          Token (Literal "static");
          Token (Literal "struct");
          Token (Literal "trait");
          Token (Literal "type");
          Token (Literal "union");
          Token (Literal "unsafe");
          Token (Literal "use");
          Token (Literal "where");
          Token (Literal "while");
        |];
        Token (Name "ellipsis");
      |];
      Token (Literal "$");
    |];
  );
  "function_modifiers",
  Some (
    Repeat1 (
      Alt [|
        Token (Literal "async");
        Token (Literal "default");
        Token (Literal "const");
        Token (Literal "unsafe");
        Token (Name "extern_modifier");
      |];
    );
  );
  "macro_rule",
  Some (
    Seq [
      Token (Name "token_tree_pattern");
      Token (Literal "=>");
      Token (Name "token_tree");
    ];
  );
  "delim_token_tree",
  Some (
    Alt [|
      Seq [
        Token (Literal "(");
        Repeat (
          Token (Name "delim_tokens");
        );
        Token (Literal ")");
      ];
      Seq [
        Token (Literal "[");
        Repeat (
          Token (Name "delim_tokens");
        );
        Token (Literal "]");
      ];
      Seq [
        Token (Literal "{");
        Repeat (
          Token (Name "delim_tokens");
        );
        Token (Literal "}");
      ];
    |];
  );
  "delim_tokens",
  Some (
    Alt [|
      Token (Name "non_delim_token");
      Token (Name "delim_token_tree");
    |];
  );
  "macro_definition",
  Some (
    Seq [
      Token (Literal "macro_rules!");
      Alt [|
        Token (Name "identifier");
        Alt [|
          Token (Literal "default");
          Token (Literal "union");
        |];
      |];
      Alt [|
        Seq [
          Token (Literal "(");
          Repeat (
            Seq [
              Token (Name "macro_rule");
              Token (Literal ";");
            ];
          );
          Opt (
            Token (Name "macro_rule");
          );
          Token (Literal ")");
          Token (Literal ";");
        ];
        Seq [
          Token (Literal "{");
          Repeat (
            Seq [
              Token (Name "macro_rule");
              Token (Literal ";");
            ];
          );
          Opt (
            Token (Name "macro_rule");
          );
          Token (Literal "}");
        ];
      |];
    ];
  );
  "abstract_type",
  Some (
    Seq [
      Token (Literal "impl");
      Opt (
        Seq [
          Token (Literal "for");
          Token (Name "type_parameters");
        ];
      );
      Alt [|
        Token (Name "identifier");
        Token (Name "scoped_type_identifier");
        Token (Name "generic_type");
        Token (Name "function_type");
      |];
    ];
  );
  "arguments",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Repeat (
            Token (Name "attribute_item");
          );
          Token (Name "expression");
          Repeat (
            Seq [
              Token (Literal ",");
              Repeat (
                Token (Name "attribute_item");
              );
              Token (Name "expression");
            ];
          );
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal ")");
    ];
  );
  "array_expression",
  Some (
    Seq [
      Token (Literal "[");
      Repeat (
        Token (Name "attribute_item");
      );
      Alt [|
        Seq [
          Token (Name "expression");
          Token (Literal ";");
          Token (Name "expression");
        ];
        Seq [
          Opt (
            Seq [
              Repeat (
                Token (Name "attribute_item");
              );
              Token (Name "expression");
              Repeat (
                Seq [
                  Token (Literal ",");
                  Repeat (
                    Token (Name "attribute_item");
                  );
                  Token (Name "expression");
                ];
              );
            ];
          );
          Opt (
            Token (Literal ",");
          );
        ];
      |];
      Token (Literal "]");
    ];
  );
  "array_type",
  Some (
    Seq [
      Token (Literal "[");
      Token (Name "type");
      Opt (
        Seq [
          Token (Literal ";");
          Token (Name "expression");
        ];
      );
      Token (Literal "]");
    ];
  );
  "assignment_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "=");
      Token (Name "expression");
    ];
  );
  "associated_type",
  Some (
    Seq [
      Token (Literal "type");
      Token (Name "identifier");
      Opt (
        Token (Name "type_parameters");
      );
      Opt (
        Token (Name "trait_bounds");
      );
      Token (Literal ";");
    ];
  );
  "async_block",
  Some (
    Seq [
      Token (Literal "async");
      Opt (
        Token (Literal "move");
      );
      Token (Name "block");
    ];
  );
  "attribute",
  Some (
    Seq [
      Alt [|
        Token (Name "self");
        Alt [|
          Token (Literal "u8");
          Token (Literal "i8");
          Token (Literal "u16");
          Token (Literal "i16");
          Token (Literal "u32");
          Token (Literal "i32");
          Token (Literal "u64");
          Token (Literal "i64");
          Token (Literal "u128");
          Token (Literal "i128");
          Token (Literal "isize");
          Token (Literal "usize");
          Token (Literal "f32");
          Token (Literal "f64");
          Token (Literal "bool");
          Token (Literal "str");
          Token (Literal "char");
        |];
        Token (Name "metavariable");
        Token (Name "super");
        Token (Name "crate");
        Token (Name "identifier");
        Token (Name "scoped_identifier");
        Alt [|
          Token (Literal "default");
          Token (Literal "union");
        |];
      |];
      Opt (
        Alt [|
          Seq [
            Token (Literal "=");
            Token (Name "expression");
          ];
          Token (Name "delim_token_tree");
        |];
      );
    ];
  );
  "attribute_item",
  Some (
    Seq [
      Token (Literal "#");
      Token (Literal "[");
      Token (Name "attribute");
      Token (Literal "]");
    ];
  );
  "await_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal ".");
      Token (Literal "await");
    ];
  );
  "base_field_initializer",
  Some (
    Seq [
      Token (Literal "..");
      Token (Name "expression");
    ];
  );
  "binary_expression",
  Some (
    Alt [|
      Seq [
        Token (Name "expression");
        Token (Literal "&&");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "||");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "&");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "|");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "^");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Alt [|
          Token (Literal "==");
          Token (Literal "!=");
          Token (Literal "<");
          Token (Literal "<=");
          Token (Literal ">");
          Token (Literal ">=");
        |];
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Alt [|
          Token (Literal "<<");
          Token (Literal ">>");
        |];
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Alt [|
          Token (Literal "+");
          Token (Literal "-");
        |];
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Alt [|
          Token (Literal "*");
          Token (Literal "/");
          Token (Literal "%");
        |];
        Token (Name "expression");
      ];
    |];
  );
  "block",
  Some (
    Seq [
      Opt (
        Seq [
          Token (Name "label");
          Token (Literal ":");
        ];
      );
      Token (Literal "{");
      Repeat (
        Token (Name "statement");
      );
      Opt (
        Token (Name "expression");
      );
      Token (Literal "}");
    ];
  );
  "bounded_type",
  Some (
    Alt [|
      Seq [
        Token (Name "lifetime");
        Token (Literal "+");
        Token (Name "type");
      ];
      Seq [
        Token (Name "type");
        Token (Literal "+");
        Token (Name "type");
      ];
      Seq [
        Token (Name "type");
        Token (Literal "+");
        Token (Name "lifetime");
      ];
    |];
  );
  "bracketed_type",
  Some (
    Seq [
      Token (Literal "<");
      Alt [|
        Token (Name "type");
        Token (Name "qualified_type");
      |];
      Token (Literal ">");
    ];
  );
  "break_expression",
  Some (
    Seq [
      Token (Literal "break");
      Opt (
        Token (Name "label");
      );
      Opt (
        Token (Name "expression");
      );
    ];
  );
  "call_expression",
  Some (
    Seq [
      Token (Name "expression_except_range");
      Token (Name "arguments");
    ];
  );
  "captured_pattern",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Literal "@");
      Token (Name "pattern");
    ];
  );
  "closure_expression",
  Some (
    Seq [
      Opt (
        Token (Literal "static");
      );
      Opt (
        Token (Literal "move");
      );
      Token (Name "closure_parameters");
      Alt [|
        Seq [
          Opt (
            Seq [
              Token (Literal "->");
              Token (Name "type");
            ];
          );
          Token (Name "block");
        ];
        Alt [|
          Token (Name "expression");
          Token (Literal "_");
        |];
      |];
    ];
  );
  "closure_parameters",
  Some (
    Seq [
      Token (Literal "|");
      Opt (
        Seq [
          Alt [|
            Token (Name "pattern");
            Token (Name "parameter");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "pattern");
                Token (Name "parameter");
              |];
            ];
          );
        ];
      );
      Token (Literal "|");
    ];
  );
  "compound_assignment_expr",
  Some (
    Seq [
      Token (Name "expression");
      Alt [|
        Token (Literal "+=");
        Token (Literal "-=");
        Token (Literal "*=");
        Token (Literal "/=");
        Token (Literal "%=");
        Token (Literal "&=");
        Token (Literal "|=");
        Token (Literal "^=");
        Token (Literal "<<=");
        Token (Literal ">>=");
      |];
      Token (Name "expression");
    ];
  );
  "condition",
  Some (
    Alt [|
      Token (Name "expression");
      Token (Name "let_condition");
      Token (Name "let_chain");
    |];
  );
  "const_block",
  Some (
    Seq [
      Token (Literal "const");
      Token (Name "block");
    ];
  );
  "const_item",
  Some (
    Seq [
      Opt (
        Token (Name "visibility_modifier");
      );
      Token (Literal "const");
      Token (Name "identifier");
      Token (Literal ":");
      Token (Name "type");
      Opt (
        Seq [
          Token (Literal "=");
          Token (Name "expression");
        ];
      );
      Token (Literal ";");
    ];
  );
  "const_parameter",
  Some (
    Seq [
      Token (Literal "const");
      Token (Name "identifier");
      Token (Literal ":");
      Token (Name "type");
    ];
  );
  "constrained_type_parameter",
  Some (
    Seq [
      Alt [|
        Token (Name "lifetime");
        Token (Name "identifier");
      |];
      Token (Name "trait_bounds");
    ];
  );
  "declaration_list",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Alt [|
          Alt [|
            Token (Name "const_item");
            Token (Name "macro_invocation");
            Token (Name "macro_definition");
            Token (Name "empty_statement");
            Token (Name "attribute_item");
            Token (Name "inner_attribute_item");
            Token (Name "mod_item");
            Token (Name "foreign_mod_item");
            Token (Name "struct_item");
            Token (Name "union_item");
            Token (Name "enum_item");
            Token (Name "type_item");
            Token (Name "function_item");
            Token (Name "function_signature_item");
            Token (Name "impl_item");
            Token (Name "trait_item");
            Token (Name "associated_type");
            Token (Name "let_declaration");
            Token (Name "use_declaration");
            Token (Name "extern_crate_declaration");
            Token (Name "static_item");
          |];
          Token (Name "ellipsis");
        |];
      );
      Token (Literal "}");
    ];
  );
  "deep_ellipsis",
  Some (
    Seq [
      Token (Literal "<...");
      Token (Name "expression");
      Token (Literal "...>");
    ];
  );
  "dynamic_type",
  Some (
    Seq [
      Token (Literal "dyn");
      Alt [|
        Token (Name "identifier");
        Token (Name "scoped_type_identifier");
        Token (Name "generic_type");
        Token (Name "function_type");
      |];
    ];
  );
  "else_clause",
  Some (
    Seq [
      Token (Literal "else");
      Alt [|
        Token (Name "block");
        Token (Name "if_expression");
      |];
    ];
  );
  "enum_item",
  Some (
    Seq [
      Opt (
        Token (Name "visibility_modifier");
      );
      Token (Literal "enum");
      Token (Name "identifier");
      Opt (
        Token (Name "type_parameters");
      );
      Opt (
        Token (Name "where_clause");
      );
      Token (Name "enum_variant_list");
    ];
  );
  "enum_variant",
  Some (
    Seq [
      Opt (
        Token (Name "visibility_modifier");
      );
      Token (Name "identifier");
      Opt (
        Alt [|
          Token (Name "field_declaration_list");
          Token (Name "ordered_field_declaration_list");
        |];
      );
      Opt (
        Seq [
          Token (Literal "=");
          Token (Name "expression");
        ];
      );
    ];
  );
  "enum_variant_list",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Repeat (
            Token (Name "attribute_item");
          );
          Token (Name "enum_variant");
          Repeat (
            Seq [
              Token (Literal ",");
              Repeat (
                Token (Name "attribute_item");
              );
              Token (Name "enum_variant");
            ];
          );
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal "}");
    ];
  );
  "expression",
  Some (
    Alt [|
      Token (Name "expression_except_range");
      Token (Name "range_expression");
      Token (Name "ellipsis");
      Token (Name "deep_ellipsis");
      Token (Name "member_access_ellipsis_expression");
    |];
  );
  "expression_except_range",
  Some (
    Alt [|
      Token (Name "unary_expression");
      Token (Name "reference_expression");
      Token (Name "try_expression");
      Token (Name "binary_expression");
      Token (Name "assignment_expression");
      Token (Name "compound_assignment_expr");
      Token (Name "type_cast_expression");
      Token (Name "call_expression");
      Token (Name "return_expression");
      Token (Name "yield_expression");
      Token (Name "literal");
      Token (Name "identifier");
      Alt [|
        Token (Literal "u8");
        Token (Literal "i8");
        Token (Literal "u16");
        Token (Literal "i16");
        Token (Literal "u32");
        Token (Literal "i32");
        Token (Literal "u64");
        Token (Literal "i64");
        Token (Literal "u128");
        Token (Literal "i128");
        Token (Literal "isize");
        Token (Literal "usize");
        Token (Literal "f32");
        Token (Literal "f64");
        Token (Literal "bool");
        Token (Literal "str");
        Token (Literal "char");
      |];
      Alt [|
        Token (Literal "default");
        Token (Literal "union");
      |];
      Token (Name "self");
      Token (Name "scoped_identifier");
      Token (Name "generic_function");
      Token (Name "await_expression");
      Token (Name "field_expression");
      Token (Name "array_expression");
      Token (Name "tuple_expression");
      Token (Name "macro_invocation");
      Token (Name "unit_expression");
      Token (Name "break_expression");
      Token (Name "continue_expression");
      Token (Name "index_expression");
      Token (Name "metavariable");
      Token (Name "closure_expression");
      Token (Name "parenthesized_expression");
      Token (Name "struct_expression");
      Alt [|
        Token (Name "unsafe_block");
        Token (Name "async_block");
        Token (Name "try_block");
        Token (Name "block");
        Token (Name "if_expression");
        Token (Name "match_expression");
        Token (Name "while_expression");
        Token (Name "loop_expression");
        Token (Name "for_expression");
        Token (Name "const_block");
      |];
    |];
  );
  "expression_statement",
  Some (
    Alt [|
      Alt [|
        Seq [
          Token (Name "expression");
          Token (Literal ";");
        ];
        Alt [|
          Token (Name "unsafe_block");
          Token (Name "async_block");
          Token (Name "try_block");
          Token (Name "block");
          Token (Name "if_expression");
          Token (Name "match_expression");
          Token (Name "while_expression");
          Token (Name "loop_expression");
          Token (Name "for_expression");
          Token (Name "const_block");
        |];
      |];
      Seq [
        Token (Name "ellipsis");
        Token (Literal ";");
      ];
      Token (Name "ellipsis");
    |];
  );
  "extern_crate_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "visibility_modifier");
      );
      Token (Literal "extern");
      Token (Name "crate");
      Token (Name "identifier");
      Opt (
        Seq [
          Token (Literal "as");
          Token (Name "identifier");
        ];
      );
      Token (Literal ";");
    ];
  );
  "field_declaration",
  Some (
    Alt [|
      Seq [
        Opt (
          Token (Name "visibility_modifier");
        );
        Token (Name "identifier");
        Token (Literal ":");
        Token (Name "type");
      ];
      Token (Name "ellipsis");
    |];
  );
  "field_declaration_list",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Repeat (
            Token (Name "attribute_item");
          );
          Token (Name "field_declaration");
          Repeat (
            Seq [
              Token (Literal ",");
              Repeat (
                Token (Name "attribute_item");
              );
              Token (Name "field_declaration");
            ];
          );
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal "}");
    ];
  );
  "field_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal ".");
      Alt [|
        Token (Name "identifier");
        Token (Name "integer_literal");
      |];
    ];
  );
  "field_initializer",
  Some (
    Seq [
      Repeat (
        Token (Name "attribute_item");
      );
      Token (Name "identifier");
      Token (Literal ":");
      Token (Name "expression");
    ];
  );
  "field_initializer_list",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Alt [|
            Token (Name "shorthand_field_initializer");
            Token (Name "field_initializer");
            Token (Name "base_field_initializer");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "shorthand_field_initializer");
                Token (Name "field_initializer");
                Token (Name "base_field_initializer");
              |];
            ];
          );
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal "}");
    ];
  );
  "field_pattern",
  Some (
    Seq [
      Opt (
        Token (Literal "ref");
      );
      Opt (
        Token (Name "mutable_specifier");
      );
      Alt [|
        Token (Name "identifier");
        Seq [
          Token (Name "identifier");
          Token (Literal ":");
          Token (Name "pattern");
        ];
      |];
    ];
  );
  "for_expression",
  Some (
    Seq [
      Opt (
        Seq [
          Token (Name "label");
          Token (Literal ":");
        ];
      );
      Token (Literal "for");
      Token (Name "pattern");
      Token (Literal "in");
      Token (Name "expression");
      Token (Name "block");
    ];
  );
  "foreign_mod_item",
  Some (
    Seq [
      Opt (
        Token (Name "visibility_modifier");
      );
      Token (Name "extern_modifier");
      Alt [|
        Token (Literal ";");
        Token (Name "declaration_list");
      |];
    ];
  );
  "function_item",
  Some (
    Seq [
      Opt (
        Token (Name "visibility_modifier");
      );
      Opt (
        Token (Name "function_modifiers");
      );
      Token (Literal "fn");
      Alt [|
        Token (Name "identifier");
        Token (Name "metavariable");
      |];
      Opt (
        Token (Name "type_parameters");
      );
      Token (Name "parameters");
      Opt (
        Seq [
          Token (Literal "->");
          Token (Name "type");
        ];
      );
      Opt (
        Token (Name "where_clause");
      );
      Token (Name "block");
    ];
  );
  "function_signature_item",
  Some (
    Seq [
      Opt (
        Token (Name "visibility_modifier");
      );
      Opt (
        Token (Name "function_modifiers");
      );
      Token (Literal "fn");
      Alt [|
        Token (Name "identifier");
        Token (Name "metavariable");
      |];
      Opt (
        Token (Name "type_parameters");
      );
      Token (Name "parameters");
      Opt (
        Seq [
          Token (Literal "->");
          Token (Name "type");
        ];
      );
      Opt (
        Token (Name "where_clause");
      );
      Token (Literal ";");
    ];
  );
  "function_type",
  Some (
    Seq [
      Opt (
        Token (Name "for_lifetimes");
      );
      Alt [|
        Alt [|
          Token (Name "identifier");
          Token (Name "scoped_type_identifier");
        |];
        Seq [
          Opt (
            Token (Name "function_modifiers");
          );
          Token (Literal "fn");
        ];
      |];
      Token (Name "parameters");
      Opt (
        Seq [
          Token (Literal "->");
          Token (Name "type");
        ];
      );
    ];
  );
  "generic_function",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "scoped_identifier");
        Token (Name "field_expression");
      |];
      Token (Literal "::");
      Token (Name "type_arguments");
    ];
  );
  "generic_type",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Alt [|
          Token (Literal "default");
          Token (Literal "union");
        |];
        Token (Name "scoped_type_identifier");
      |];
      Token (Name "type_arguments");
    ];
  );
  "generic_type_with_turbofish",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "scoped_identifier");
      |];
      Token (Literal "::");
      Token (Name "type_arguments");
    ];
  );
  "higher_ranked_trait_bound",
  Some (
    Seq [
      Token (Literal "for");
      Token (Name "type_parameters");
      Token (Name "type");
    ];
  );
  "if_expression",
  Some (
    Seq [
      Token (Literal "if");
      Token (Name "condition");
      Token (Name "block");
      Opt (
        Token (Name "else_clause");
      );
    ];
  );
  "impl_item",
  Some (
    Seq [
      Opt (
        Token (Literal "unsafe");
      );
      Token (Literal "impl");
      Opt (
        Token (Name "type_parameters");
      );
      Opt (
        Seq [
          Opt (
            Token (Literal "!");
          );
          Alt [|
            Token (Name "identifier");
            Token (Name "scoped_type_identifier");
            Token (Name "generic_type");
          |];
          Token (Literal "for");
        ];
      );
      Token (Name "type");
      Opt (
        Token (Name "where_clause");
      );
      Alt [|
        Token (Name "declaration_list");
        Token (Literal ";");
      |];
    ];
  );
  "index_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "[");
      Token (Name "expression");
      Token (Literal "]");
    ];
  );
  "inner_attribute_item",
  Some (
    Seq [
      Token (Literal "#");
      Token (Literal "!");
      Token (Literal "[");
      Token (Name "attribute");
      Token (Literal "]");
    ];
  );
  "last_match_arm",
  Some (
    Seq [
      Repeat (
        Token (Name "attribute_item");
      );
      Token (Name "match_pattern");
      Token (Literal "=>");
      Token (Name "expression");
      Opt (
        Token (Literal ",");
      );
    ];
  );
  "let_chain",
  Some (
    Alt [|
      Seq [
        Token (Name "let_chain");
        Token (Literal "&&");
        Token (Name "let_condition");
      ];
      Seq [
        Token (Name "let_chain");
        Token (Literal "&&");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "let_condition");
        Token (Literal "&&");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "let_condition");
        Token (Literal "&&");
        Token (Name "let_condition");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "&&");
        Token (Name "let_condition");
      ];
    |];
  );
  "let_condition",
  Some (
    Seq [
      Token (Literal "let");
      Token (Name "pattern");
      Token (Literal "=");
      Token (Name "expression");
    ];
  );
  "let_declaration",
  Some (
    Seq [
      Token (Literal "let");
      Opt (
        Token (Name "mutable_specifier");
      );
      Token (Name "pattern");
      Opt (
        Seq [
          Token (Literal ":");
          Token (Name "type");
        ];
      );
      Opt (
        Seq [
          Token (Literal "=");
          Token (Name "expression");
        ];
      );
      Opt (
        Seq [
          Token (Literal "else");
          Token (Name "block");
        ];
      );
      Token (Literal ";");
    ];
  );
  "loop_expression",
  Some (
    Seq [
      Opt (
        Seq [
          Token (Name "label");
          Token (Literal ":");
        ];
      );
      Token (Literal "loop");
      Token (Name "block");
    ];
  );
  "macro_invocation",
  Some (
    Seq [
      Alt [|
        Token (Name "scoped_identifier");
        Token (Name "identifier");
        Alt [|
          Token (Literal "default");
          Token (Literal "union");
        |];
      |];
      Token (Literal "!");
      Token (Name "delim_token_tree");
    ];
  );
  "match_arm",
  Some (
    Seq [
      Repeat (
        Token (Name "attribute_item");
      );
      Token (Name "match_pattern");
      Token (Literal "=>");
      Alt [|
        Seq [
          Token (Name "expression");
          Token (Literal ",");
        ];
        Alt [|
          Token (Name "unsafe_block");
          Token (Name "async_block");
          Token (Name "try_block");
          Token (Name "block");
          Token (Name "if_expression");
          Token (Name "match_expression");
          Token (Name "while_expression");
          Token (Name "loop_expression");
          Token (Name "for_expression");
          Token (Name "const_block");
        |];
      |];
    ];
  );
  "match_block",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Repeat (
            Token (Name "match_arm");
          );
          Token (Name "last_match_arm");
        ];
      );
      Token (Literal "}");
    ];
  );
  "match_expression",
  Some (
    Seq [
      Token (Literal "match");
      Token (Name "expression");
      Token (Name "match_block");
    ];
  );
  "match_pattern",
  Some (
    Seq [
      Alt [|
        Token (Name "pattern");
        Token (Name "closure_expression");
      |];
      Opt (
        Seq [
          Token (Literal "if");
          Token (Name "condition");
        ];
      );
    ];
  );
  "member_access_ellipsis_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal ".");
      Token (Name "ellipsis");
    ];
  );
  "mod_item",
  Some (
    Seq [
      Opt (
        Token (Name "visibility_modifier");
      );
      Token (Literal "mod");
      Token (Name "identifier");
      Alt [|
        Token (Literal ";");
        Token (Name "declaration_list");
      |];
    ];
  );
  "mut_pattern",
  Some (
    Seq [
      Token (Name "mutable_specifier");
      Token (Name "pattern");
    ];
  );
  "optional_type_parameter",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "constrained_type_parameter");
      |];
      Token (Literal "=");
      Token (Name "type");
    ];
  );
  "or_pattern",
  Some (
    Seq [
      Token (Name "pattern");
      Token (Literal "|");
      Token (Name "pattern");
    ];
  );
  "ordered_field_declaration_list",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Repeat (
            Token (Name "attribute_item");
          );
          Opt (
            Token (Name "visibility_modifier");
          );
          Token (Name "type");
          Repeat (
            Seq [
              Token (Literal ",");
              Repeat (
                Token (Name "attribute_item");
              );
              Opt (
                Token (Name "visibility_modifier");
              );
              Token (Name "type");
            ];
          );
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal ")");
    ];
  );
  "parameter",
  Some (
    Seq [
      Opt (
        Token (Name "mutable_specifier");
      );
      Alt [|
        Token (Name "pattern");
        Token (Name "self");
      |];
      Token (Literal ":");
      Token (Name "type");
    ];
  );
  "parameters",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Opt (
            Token (Name "attribute_item");
          );
          Alt [|
            Token (Name "parameter");
            Token (Name "self_parameter");
            Token (Name "variadic_parameter");
            Token (Literal "_");
            Token (Name "type");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Opt (
                Token (Name "attribute_item");
              );
              Alt [|
                Token (Name "parameter");
                Token (Name "self_parameter");
                Token (Name "variadic_parameter");
                Token (Literal "_");
                Token (Name "type");
              |];
            ];
          );
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal ")");
    ];
  );
  "parenthesized_expression",
  Some (
    Seq [
      Token (Literal "(");
      Alt [|
        Token (Name "expression");
        Token (Name "semgrep_typed_metavar");
      |];
      Token (Literal ")");
    ];
  );
  "pattern",
  Some (
    Alt [|
      Token (Name "literal_pattern");
      Alt [|
        Token (Literal "u8");
        Token (Literal "i8");
        Token (Literal "u16");
        Token (Literal "i16");
        Token (Literal "u32");
        Token (Literal "i32");
        Token (Literal "u64");
        Token (Literal "i64");
        Token (Literal "u128");
        Token (Literal "i128");
        Token (Literal "isize");
        Token (Literal "usize");
        Token (Literal "f32");
        Token (Literal "f64");
        Token (Literal "bool");
        Token (Literal "str");
        Token (Literal "char");
      |];
      Token (Name "identifier");
      Token (Name "scoped_identifier");
      Token (Name "tuple_pattern");
      Token (Name "tuple_struct_pattern");
      Token (Name "struct_pattern");
      Alt [|
        Token (Literal "default");
        Token (Literal "union");
      |];
      Token (Name "ref_pattern");
      Token (Name "slice_pattern");
      Token (Name "captured_pattern");
      Token (Name "reference_pattern");
      Token (Name "remaining_field_pattern");
      Token (Name "mut_pattern");
      Token (Name "range_pattern");
      Token (Name "or_pattern");
      Token (Name "const_block");
      Token (Name "macro_invocation");
      Token (Literal "_");
    |];
  );
  "pointer_type",
  Some (
    Seq [
      Token (Literal "*");
      Alt [|
        Token (Literal "const");
        Token (Name "mutable_specifier");
      |];
      Token (Name "type");
    ];
  );
  "qualified_type",
  Some (
    Seq [
      Token (Name "type");
      Token (Literal "as");
      Token (Name "type");
    ];
  );
  "range_expression",
  Some (
    Alt [|
      Seq [
        Token (Name "expression");
        Alt [|
          Token (Literal "..");
          Token (Literal "...");
          Token (Literal "..=");
        |];
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "..");
      ];
      Seq [
        Token (Literal "..");
        Token (Name "expression");
      ];
      Token (Literal "..");
    |];
  );
  "range_pattern",
  Some (
    Seq [
      Alt [|
        Token (Name "literal_pattern");
        Alt [|
          Token (Name "self");
          Alt [|
            Token (Literal "u8");
            Token (Literal "i8");
            Token (Literal "u16");
            Token (Literal "i16");
            Token (Literal "u32");
            Token (Literal "i32");
            Token (Literal "u64");
            Token (Literal "i64");
            Token (Literal "u128");
            Token (Literal "i128");
            Token (Literal "isize");
            Token (Literal "usize");
            Token (Literal "f32");
            Token (Literal "f64");
            Token (Literal "bool");
            Token (Literal "str");
            Token (Literal "char");
          |];
          Token (Name "metavariable");
          Token (Name "super");
          Token (Name "crate");
          Token (Name "identifier");
          Token (Name "scoped_identifier");
          Alt [|
            Token (Literal "default");
            Token (Literal "union");
          |];
        |];
      |];
      Alt [|
        Token (Literal "...");
        Token (Literal "..=");
      |];
      Alt [|
        Token (Name "literal_pattern");
        Alt [|
          Token (Name "self");
          Alt [|
            Token (Literal "u8");
            Token (Literal "i8");
            Token (Literal "u16");
            Token (Literal "i16");
            Token (Literal "u32");
            Token (Literal "i32");
            Token (Literal "u64");
            Token (Literal "i64");
            Token (Literal "u128");
            Token (Literal "i128");
            Token (Literal "isize");
            Token (Literal "usize");
            Token (Literal "f32");
            Token (Literal "f64");
            Token (Literal "bool");
            Token (Literal "str");
            Token (Literal "char");
          |];
          Token (Name "metavariable");
          Token (Name "super");
          Token (Name "crate");
          Token (Name "identifier");
          Token (Name "scoped_identifier");
          Alt [|
            Token (Literal "default");
            Token (Literal "union");
          |];
        |];
      |];
    ];
  );
  "ref_pattern",
  Some (
    Seq [
      Token (Literal "ref");
      Token (Name "pattern");
    ];
  );
  "reference_expression",
  Some (
    Seq [
      Token (Literal "&");
      Opt (
        Token (Name "mutable_specifier");
      );
      Token (Name "expression");
    ];
  );
  "reference_pattern",
  Some (
    Seq [
      Token (Literal "&");
      Opt (
        Token (Name "mutable_specifier");
      );
      Token (Name "pattern");
    ];
  );
  "reference_type",
  Some (
    Seq [
      Token (Literal "&");
      Opt (
        Token (Name "lifetime");
      );
      Opt (
        Token (Name "mutable_specifier");
      );
      Token (Name "type");
    ];
  );
  "removed_trait_bound",
  Some (
    Seq [
      Token (Literal "?");
      Token (Name "type");
    ];
  );
  "return_expression",
  Some (
    Alt [|
      Seq [
        Token (Literal "return");
        Token (Name "expression");
      ];
      Token (Literal "return");
    |];
  );
  "scoped_identifier",
  Some (
    Seq [
      Opt (
        Alt [|
          Alt [|
            Token (Name "self");
            Alt [|
              Token (Literal "u8");
              Token (Literal "i8");
              Token (Literal "u16");
              Token (Literal "i16");
              Token (Literal "u32");
              Token (Literal "i32");
              Token (Literal "u64");
              Token (Literal "i64");
              Token (Literal "u128");
              Token (Literal "i128");
              Token (Literal "isize");
              Token (Literal "usize");
              Token (Literal "f32");
              Token (Literal "f64");
              Token (Literal "bool");
              Token (Literal "str");
              Token (Literal "char");
            |];
            Token (Name "metavariable");
            Token (Name "super");
            Token (Name "crate");
            Token (Name "identifier");
            Token (Name "scoped_identifier");
            Alt [|
              Token (Literal "default");
              Token (Literal "union");
            |];
          |];
          Token (Name "bracketed_type");
          Token (Name "generic_type_with_turbofish");
        |];
      );
      Token (Literal "::");
      Alt [|
        Token (Name "identifier");
        Token (Name "super");
      |];
    ];
  );
  "scoped_type_identifier",
  Some (
    Seq [
      Opt (
        Alt [|
          Alt [|
            Token (Name "self");
            Alt [|
              Token (Literal "u8");
              Token (Literal "i8");
              Token (Literal "u16");
              Token (Literal "i16");
              Token (Literal "u32");
              Token (Literal "i32");
              Token (Literal "u64");
              Token (Literal "i64");
              Token (Literal "u128");
              Token (Literal "i128");
              Token (Literal "isize");
              Token (Literal "usize");
              Token (Literal "f32");
              Token (Literal "f64");
              Token (Literal "bool");
              Token (Literal "str");
              Token (Literal "char");
            |];
            Token (Name "metavariable");
            Token (Name "super");
            Token (Name "crate");
            Token (Name "identifier");
            Token (Name "scoped_identifier");
            Alt [|
              Token (Literal "default");
              Token (Literal "union");
            |];
          |];
          Token (Name "generic_type_with_turbofish");
          Token (Name "bracketed_type");
          Token (Name "generic_type");
        |];
      );
      Token (Literal "::");
      Token (Name "identifier");
    ];
  );
  "scoped_type_identifier_in_expression_position",
  Some (
    Seq [
      Opt (
        Alt [|
          Alt [|
            Token (Name "self");
            Alt [|
              Token (Literal "u8");
              Token (Literal "i8");
              Token (Literal "u16");
              Token (Literal "i16");
              Token (Literal "u32");
              Token (Literal "i32");
              Token (Literal "u64");
              Token (Literal "i64");
              Token (Literal "u128");
              Token (Literal "i128");
              Token (Literal "isize");
              Token (Literal "usize");
              Token (Literal "f32");
              Token (Literal "f64");
              Token (Literal "bool");
              Token (Literal "str");
              Token (Literal "char");
            |];
            Token (Name "metavariable");
            Token (Name "super");
            Token (Name "crate");
            Token (Name "identifier");
            Token (Name "scoped_identifier");
            Alt [|
              Token (Literal "default");
              Token (Literal "union");
            |];
          |];
          Token (Name "generic_type_with_turbofish");
        |];
      );
      Token (Literal "::");
      Token (Name "identifier");
    ];
  );
  "scoped_use_list",
  Some (
    Seq [
      Opt (
        Alt [|
          Token (Name "self");
          Alt [|
            Token (Literal "u8");
            Token (Literal "i8");
            Token (Literal "u16");
            Token (Literal "i16");
            Token (Literal "u32");
            Token (Literal "i32");
            Token (Literal "u64");
            Token (Literal "i64");
            Token (Literal "u128");
            Token (Literal "i128");
            Token (Literal "isize");
            Token (Literal "usize");
            Token (Literal "f32");
            Token (Literal "f64");
            Token (Literal "bool");
            Token (Literal "str");
            Token (Literal "char");
          |];
          Token (Name "metavariable");
          Token (Name "super");
          Token (Name "crate");
          Token (Name "identifier");
          Token (Name "scoped_identifier");
          Alt [|
            Token (Literal "default");
            Token (Literal "union");
          |];
        |];
      );
      Token (Literal "::");
      Token (Name "use_list");
    ];
  );
  "semgrep_typed_metavar",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Literal ":");
      Token (Name "type");
    ];
  );
  "shorthand_field_initializer",
  Some (
    Seq [
      Repeat (
        Token (Name "attribute_item");
      );
      Token (Name "identifier");
    ];
  );
  "slice_pattern",
  Some (
    Seq [
      Token (Literal "[");
      Opt (
        Seq [
          Token (Name "pattern");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "pattern");
            ];
          );
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal "]");
    ];
  );
  "statement",
  Some (
    Alt [|
      Token (Name "expression_statement");
      Alt [|
        Alt [|
          Token (Name "const_item");
          Token (Name "macro_invocation");
          Token (Name "macro_definition");
          Token (Name "empty_statement");
          Token (Name "attribute_item");
          Token (Name "inner_attribute_item");
          Token (Name "mod_item");
          Token (Name "foreign_mod_item");
          Token (Name "struct_item");
          Token (Name "union_item");
          Token (Name "enum_item");
          Token (Name "type_item");
          Token (Name "function_item");
          Token (Name "function_signature_item");
          Token (Name "impl_item");
          Token (Name "trait_item");
          Token (Name "associated_type");
          Token (Name "let_declaration");
          Token (Name "use_declaration");
          Token (Name "extern_crate_declaration");
          Token (Name "static_item");
        |];
        Token (Name "ellipsis");
      |];
    |];
  );
  "static_item",
  Some (
    Seq [
      Opt (
        Token (Name "visibility_modifier");
      );
      Token (Literal "static");
      Opt (
        Token (Literal "ref");
      );
      Opt (
        Token (Name "mutable_specifier");
      );
      Token (Name "identifier");
      Token (Literal ":");
      Token (Name "type");
      Opt (
        Seq [
          Token (Literal "=");
          Token (Name "expression");
        ];
      );
      Token (Literal ";");
    ];
  );
  "struct_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "scoped_type_identifier_in_expression_position");
        Token (Name "generic_type_with_turbofish");
      |];
      Token (Name "field_initializer_list");
    ];
  );
  "struct_item",
  Some (
    Seq [
      Opt (
        Token (Name "visibility_modifier");
      );
      Token (Literal "struct");
      Token (Name "identifier");
      Opt (
        Token (Name "type_parameters");
      );
      Alt [|
        Seq [
          Opt (
            Token (Name "where_clause");
          );
          Token (Name "field_declaration_list");
        ];
        Seq [
          Token (Name "ordered_field_declaration_list");
          Opt (
            Token (Name "where_clause");
          );
          Token (Literal ";");
        ];
        Token (Literal ";");
      |];
    ];
  );
  "struct_pattern",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "scoped_type_identifier");
      |];
      Token (Literal "{");
      Opt (
        Seq [
          Alt [|
            Token (Name "field_pattern");
            Token (Name "remaining_field_pattern");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "field_pattern");
                Token (Name "remaining_field_pattern");
              |];
            ];
          );
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal "}");
    ];
  );
  "trait_bounds",
  Some (
    Seq [
      Token (Literal ":");
      Alt [|
        Token (Name "type");
        Token (Name "lifetime");
        Token (Name "higher_ranked_trait_bound");
        Token (Name "removed_trait_bound");
      |];
      Repeat (
        Seq [
          Token (Literal "+");
          Alt [|
            Token (Name "type");
            Token (Name "lifetime");
            Token (Name "higher_ranked_trait_bound");
            Token (Name "removed_trait_bound");
          |];
        ];
      );
    ];
  );
  "trait_item",
  Some (
    Seq [
      Opt (
        Token (Name "visibility_modifier");
      );
      Opt (
        Token (Literal "unsafe");
      );
      Token (Literal "trait");
      Token (Name "identifier");
      Opt (
        Token (Name "type_parameters");
      );
      Opt (
        Token (Name "trait_bounds");
      );
      Opt (
        Token (Name "where_clause");
      );
      Token (Name "declaration_list");
    ];
  );
  "try_block",
  Some (
    Seq [
      Token (Literal "try");
      Token (Name "block");
    ];
  );
  "try_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "?");
    ];
  );
  "tuple_expression",
  Some (
    Seq [
      Token (Literal "(");
      Repeat (
        Token (Name "attribute_item");
      );
      Token (Name "expression");
      Token (Literal ",");
      Repeat (
        Seq [
          Token (Name "expression");
          Token (Literal ",");
        ];
      );
      Opt (
        Token (Name "expression");
      );
      Token (Literal ")");
    ];
  );
  "tuple_pattern",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Alt [|
            Token (Name "pattern");
            Token (Name "closure_expression");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "pattern");
                Token (Name "closure_expression");
              |];
            ];
          );
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal ")");
    ];
  );
  "tuple_struct_pattern",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "scoped_identifier");
      |];
      Token (Literal "(");
      Opt (
        Seq [
          Token (Name "pattern");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "pattern");
            ];
          );
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal ")");
    ];
  );
  "tuple_type",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "type");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "type");
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal ")");
    ];
  );
  "type",
  Some (
    Alt [|
      Token (Name "abstract_type");
      Token (Name "reference_type");
      Token (Name "metavariable");
      Token (Name "pointer_type");
      Token (Name "generic_type");
      Token (Name "scoped_type_identifier");
      Token (Name "tuple_type");
      Token (Name "unit_type");
      Token (Name "array_type");
      Token (Name "function_type");
      Token (Name "identifier");
      Token (Name "macro_invocation");
      Token (Name "empty_type");
      Token (Name "dynamic_type");
      Token (Name "bounded_type");
      Alt [|
        Token (Literal "u8");
        Token (Literal "i8");
        Token (Literal "u16");
        Token (Literal "i16");
        Token (Literal "u32");
        Token (Literal "i32");
        Token (Literal "u64");
        Token (Literal "i64");
        Token (Literal "u128");
        Token (Literal "i128");
        Token (Literal "isize");
        Token (Literal "usize");
        Token (Literal "f32");
        Token (Literal "f64");
        Token (Literal "bool");
        Token (Literal "str");
        Token (Literal "char");
      |];
    |];
  );
  "type_arguments",
  Some (
    Seq [
      Token (Name "tok_prec_p1_lt");
      Alt [|
        Token (Name "type");
        Token (Name "type_binding");
        Token (Name "lifetime");
        Token (Name "literal");
        Token (Name "block");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "type");
            Token (Name "type_binding");
            Token (Name "lifetime");
            Token (Name "literal");
            Token (Name "block");
          |];
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal ">");
    ];
  );
  "type_binding",
  Some (
    Seq [
      Token (Name "identifier");
      Opt (
        Token (Name "type_arguments");
      );
      Token (Literal "=");
      Token (Name "type");
    ];
  );
  "type_cast_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "as");
      Token (Name "type");
    ];
  );
  "type_item",
  Some (
    Seq [
      Opt (
        Token (Name "visibility_modifier");
      );
      Token (Literal "type");
      Token (Name "identifier");
      Opt (
        Token (Name "type_parameters");
      );
      Token (Literal "=");
      Token (Name "type");
      Opt (
        Token (Name "where_clause");
      );
      Token (Literal ";");
    ];
  );
  "type_parameters",
  Some (
    Seq [
      Token (Literal "<");
      Alt [|
        Token (Name "lifetime");
        Token (Name "metavariable");
        Token (Name "identifier");
        Token (Name "constrained_type_parameter");
        Token (Name "optional_type_parameter");
        Token (Name "const_parameter");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "lifetime");
            Token (Name "metavariable");
            Token (Name "identifier");
            Token (Name "constrained_type_parameter");
            Token (Name "optional_type_parameter");
            Token (Name "const_parameter");
          |];
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal ">");
    ];
  );
  "unary_expression",
  Some (
    Seq [
      Alt [|
        Token (Literal "-");
        Token (Literal "*");
        Token (Literal "!");
      |];
      Token (Name "expression");
    ];
  );
  "union_item",
  Some (
    Seq [
      Opt (
        Token (Name "visibility_modifier");
      );
      Token (Literal "union");
      Token (Name "identifier");
      Opt (
        Token (Name "type_parameters");
      );
      Opt (
        Token (Name "where_clause");
      );
      Token (Name "field_declaration_list");
    ];
  );
  "unsafe_block",
  Some (
    Seq [
      Token (Literal "unsafe");
      Token (Name "block");
    ];
  );
  "use_as_clause",
  Some (
    Seq [
      Alt [|
        Token (Name "self");
        Alt [|
          Token (Literal "u8");
          Token (Literal "i8");
          Token (Literal "u16");
          Token (Literal "i16");
          Token (Literal "u32");
          Token (Literal "i32");
          Token (Literal "u64");
          Token (Literal "i64");
          Token (Literal "u128");
          Token (Literal "i128");
          Token (Literal "isize");
          Token (Literal "usize");
          Token (Literal "f32");
          Token (Literal "f64");
          Token (Literal "bool");
          Token (Literal "str");
          Token (Literal "char");
        |];
        Token (Name "metavariable");
        Token (Name "super");
        Token (Name "crate");
        Token (Name "identifier");
        Token (Name "scoped_identifier");
        Alt [|
          Token (Literal "default");
          Token (Literal "union");
        |];
      |];
      Token (Literal "as");
      Token (Name "identifier");
    ];
  );
  "use_clause",
  Some (
    Alt [|
      Alt [|
        Token (Name "self");
        Alt [|
          Token (Literal "u8");
          Token (Literal "i8");
          Token (Literal "u16");
          Token (Literal "i16");
          Token (Literal "u32");
          Token (Literal "i32");
          Token (Literal "u64");
          Token (Literal "i64");
          Token (Literal "u128");
          Token (Literal "i128");
          Token (Literal "isize");
          Token (Literal "usize");
          Token (Literal "f32");
          Token (Literal "f64");
          Token (Literal "bool");
          Token (Literal "str");
          Token (Literal "char");
        |];
        Token (Name "metavariable");
        Token (Name "super");
        Token (Name "crate");
        Token (Name "identifier");
        Token (Name "scoped_identifier");
        Alt [|
          Token (Literal "default");
          Token (Literal "union");
        |];
      |];
      Token (Name "use_as_clause");
      Token (Name "use_list");
      Token (Name "scoped_use_list");
      Token (Name "use_wildcard");
    |];
  );
  "use_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "visibility_modifier");
      );
      Token (Literal "use");
      Token (Name "use_clause");
      Token (Literal ";");
    ];
  );
  "use_list",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Alt [|
            Token (Name "use_clause");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "use_clause");
              |];
            ];
          );
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal "}");
    ];
  );
  "use_wildcard",
  Some (
    Seq [
      Opt (
        Seq [
          Alt [|
            Token (Name "self");
            Alt [|
              Token (Literal "u8");
              Token (Literal "i8");
              Token (Literal "u16");
              Token (Literal "i16");
              Token (Literal "u32");
              Token (Literal "i32");
              Token (Literal "u64");
              Token (Literal "i64");
              Token (Literal "u128");
              Token (Literal "i128");
              Token (Literal "isize");
              Token (Literal "usize");
              Token (Literal "f32");
              Token (Literal "f64");
              Token (Literal "bool");
              Token (Literal "str");
              Token (Literal "char");
            |];
            Token (Name "metavariable");
            Token (Name "super");
            Token (Name "crate");
            Token (Name "identifier");
            Token (Name "scoped_identifier");
            Alt [|
              Token (Literal "default");
              Token (Literal "union");
            |];
          |];
          Token (Literal "::");
        ];
      );
      Token (Literal "*");
    ];
  );
  "visibility_modifier",
  Some (
    Alt [|
      Token (Name "crate");
      Seq [
        Token (Literal "pub");
        Opt (
          Seq [
            Token (Literal "(");
            Alt [|
              Token (Name "self");
              Token (Name "super");
              Token (Name "crate");
              Seq [
                Token (Literal "in");
                Alt [|
                  Token (Name "self");
                  Alt [|
                    Token (Literal "u8");
                    Token (Literal "i8");
                    Token (Literal "u16");
                    Token (Literal "i16");
                    Token (Literal "u32");
                    Token (Literal "i32");
                    Token (Literal "u64");
                    Token (Literal "i64");
                    Token (Literal "u128");
                    Token (Literal "i128");
                    Token (Literal "isize");
                    Token (Literal "usize");
                    Token (Literal "f32");
                    Token (Literal "f64");
                    Token (Literal "bool");
                    Token (Literal "str");
                    Token (Literal "char");
                  |];
                  Token (Name "metavariable");
                  Token (Name "super");
                  Token (Name "crate");
                  Token (Name "identifier");
                  Token (Name "scoped_identifier");
                  Alt [|
                    Token (Literal "default");
                    Token (Literal "union");
                  |];
                |];
              ];
            |];
            Token (Literal ")");
          ];
        );
      ];
    |];
  );
  "where_clause",
  Some (
    Seq [
      Token (Literal "where");
      Token (Name "where_predicate");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "where_predicate");
        ];
      );
      Opt (
        Token (Literal ",");
      );
    ];
  );
  "where_predicate",
  Some (
    Seq [
      Alt [|
        Token (Name "lifetime");
        Token (Name "identifier");
        Token (Name "scoped_type_identifier");
        Token (Name "generic_type");
        Token (Name "reference_type");
        Token (Name "pointer_type");
        Token (Name "tuple_type");
        Token (Name "array_type");
        Token (Name "higher_ranked_trait_bound");
        Alt [|
          Token (Literal "u8");
          Token (Literal "i8");
          Token (Literal "u16");
          Token (Literal "i16");
          Token (Literal "u32");
          Token (Literal "i32");
          Token (Literal "u64");
          Token (Literal "i64");
          Token (Literal "u128");
          Token (Literal "i128");
          Token (Literal "isize");
          Token (Literal "usize");
          Token (Literal "f32");
          Token (Literal "f64");
          Token (Literal "bool");
          Token (Literal "str");
          Token (Literal "char");
        |];
      |];
      Token (Name "trait_bounds");
    ];
  );
  "while_expression",
  Some (
    Seq [
      Opt (
        Seq [
          Token (Name "label");
          Token (Literal ":");
        ];
      );
      Token (Literal "while");
      Token (Name "condition");
      Token (Name "block");
    ];
  );
  "yield_expression",
  Some (
    Alt [|
      Seq [
        Token (Literal "yield");
        Token (Name "expression");
      ];
      Token (Literal "yield");
    |];
  );
  "semgrep_statement",
  Some (
    Seq [
      Token (Literal "__SEMGREP_STATEMENT");
      Repeat1 (
        Token (Name "statement");
      );
    ];
  );
  "semgrep_expression",
  Some (
    Seq [
      Token (Literal "__SEMGREP_EXPRESSION");
      Token (Name "expression");
    ];
  );
  "source_file",
  Some (
    Alt [|
      Seq [
        Opt (
          Token (Name "shebang");
        );
        Repeat (
          Token (Name "statement");
        );
      ];
      Token (Name "semgrep_expression");
      Token (Name "semgrep_statement");
    |];
  );
]

let trans_integer_literal ((kind, body) : mt) : CST.integer_literal =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_shebang ((kind, body) : mt) : CST.shebang =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_char_literal ((kind, body) : mt) : CST.char_literal =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_variadic_parameter ((kind, body) : mt) : CST.variadic_parameter =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_empty_type ((kind, body) : mt) : CST.empty_type =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_escape_sequence ((kind, body) : mt) : CST.escape_sequence =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_ellipsis ((kind, body) : mt) : CST.ellipsis =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_self ((kind, body) : mt) : CST.self =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_prec_p1_lt ((kind, body) : mt) : CST.tok_prec_p1_lt =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_block_comment ((kind, body) : mt) : CST.block_comment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_identifier ((kind, body) : mt) : CST.identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_boolean_literal ((kind, body) : mt) : CST.boolean_literal =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `True (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `False (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_imm_tok_dquot ((kind, body) : mt) : CST.imm_tok_dquot =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_fragment_specifier ((kind, body) : mt) : CST.fragment_specifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Blk (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Expr (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Id (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Item (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Life (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Lit (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Meta (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Pat (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Path (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Stmt (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Tt (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Ty (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `Vis (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_empty_statement ((kind, body) : mt) : CST.empty_statement =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_string_content ((kind, body) : mt) : CST.string_content =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_float_literal ((kind, body) : mt) : CST.float_literal =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_eeda0f5 ((kind, body) : mt) : CST.pat_eeda0f5 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_unit_expression ((kind, body) : mt) : CST.unit_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_unit_type ((kind, body) : mt) : CST.unit_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_metavariable ((kind, body) : mt) : CST.metavariable =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_line_comment ((kind, body) : mt) : CST.line_comment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_super ((kind, body) : mt) : CST.super =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_raw_string_literal ((kind, body) : mt) : CST.raw_string_literal =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_1e84e62 ((kind, body) : mt) : CST.pat_1e84e62 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_crate ((kind, body) : mt) : CST.crate =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_mutable_specifier ((kind, body) : mt) : CST.mutable_specifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_remaining_field_pattern ((kind, body) : mt) : CST.remaining_field_pattern =
  match body with
  | Leaf v -> v
  | Children _ -> assert false




let trans_label ((kind, body) : mt) : CST.label =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_lifetime ((kind, body) : mt) : CST.lifetime =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_negative_literal ((kind, body) : mt) : CST.negative_literal =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Int_lit (
                  trans_integer_literal (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Float_lit (
                  trans_float_literal (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_string_literal ((kind, body) : mt) : CST.string_literal =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_eeda0f5 (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Esc_seq (
                      trans_escape_sequence (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Str_content (
                      trans_string_content (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_imm_tok_dquot (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_token_binding_pattern ((kind, body) : mt) : CST.token_binding_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_metavariable (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_fragment_specifier (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false



let trans_continue_expression ((kind, body) : mt) : CST.continue_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_label (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_self_parameter ((kind, body) : mt) : CST.self_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> trans_lifetime (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> trans_mutable_specifier (Run.matcher_token v))
              v2
            ,
            trans_self (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_for_lifetimes ((kind, body) : mt) : CST.for_lifetimes =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_lifetime (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_lifetime (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_literal ((kind, body) : mt) : CST.literal =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Str_lit (
            trans_string_literal (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Raw_str_lit (
            trans_raw_string_literal (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Char_lit (
            trans_char_literal (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Bool_lit (
            trans_boolean_literal (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Int_lit (
            trans_integer_literal (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Float_lit (
            trans_float_literal (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_literal_pattern ((kind, body) : mt) : CST.literal_pattern =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Str_lit (
            trans_string_literal (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Raw_str_lit (
            trans_raw_string_literal (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Char_lit (
            trans_char_literal (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Bool_lit (
            trans_boolean_literal (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Int_lit (
            trans_integer_literal (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Float_lit (
            trans_float_literal (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Nega_lit (
            trans_negative_literal (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_extern_modifier ((kind, body) : mt) : CST.extern_modifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_string_literal (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_token_pattern ((kind, body) : mt) : CST.token_pattern =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Tok_tree_pat (
            trans_token_tree_pattern (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Tok_repe_pat (
            trans_token_repetition_pattern (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Tok_bind_pat (
            trans_token_binding_pattern (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Meta (
            trans_metavariable (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Choice_choice_lit (
            (match v with
            | Alt (0, v) ->
                `Choice_lit (
                  (match v with
                  | Alt (0, v) ->
                      `Lit (
                        trans_literal (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Id (
                        trans_identifier (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Muta_spec (
                        trans_mutable_specifier (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Self (
                        trans_self (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Super (
                        trans_super (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Crate (
                        trans_crate (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Choice_u8 (
                        (match v with
                        | Alt (0, v) ->
                            `U8 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `I8 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `U16 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `I16 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `U32 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `I32 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `U64 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `I64 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `U128 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (9, v) ->
                            `I128 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (10, v) ->
                            `Isize (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (11, v) ->
                            `Usize (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (12, v) ->
                            `F32 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (13, v) ->
                            `F64 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (14, v) ->
                            `Bool (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (15, v) ->
                            `Str (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (16, v) ->
                            `Char (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (7, v) ->
                      `Rep1_choice_SLASH (
                        Run.repeat1
                          (fun v ->
                            (match v with
                            | Alt (0, v) ->
                                `SLASH (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `X__ (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `BSLASH (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `DASH (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `EQ (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (5, v) ->
                                `DASHGT (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (6, v) ->
                                `COMMA (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (7, v) ->
                                `SEMI (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (8, v) ->
                                `COLON (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (9, v) ->
                                `COLONCOLON (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (10, v) ->
                                `BANG (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (11, v) ->
                                `QMARK (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (12, v) ->
                                `DOT (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (13, v) ->
                                `AT (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (14, v) ->
                                `STAR (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (15, v) ->
                                `AMP (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (16, v) ->
                                `HASH (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (17, v) ->
                                `PERC (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (18, v) ->
                                `HAT (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (19, v) ->
                                `PLUS (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (20, v) ->
                                `LT (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (21, v) ->
                                `GT (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (22, v) ->
                                `BAR (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (23, v) ->
                                `TILDE (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                          v
                      )
                  | Alt (8, v) ->
                      `SQUOT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `As (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Async (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (11, v) ->
                      `Await (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `Brk (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (13, v) ->
                      `Const (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (14, v) ->
                      `Cont (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (15, v) ->
                      `Defa (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (16, v) ->
                      `Enum (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (17, v) ->
                      `Fn (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (18, v) ->
                      `For (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (19, v) ->
                      `If (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (20, v) ->
                      `Impl (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (21, v) ->
                      `Let (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (22, v) ->
                      `Loop (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (23, v) ->
                      `Match (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (24, v) ->
                      `Mod (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (25, v) ->
                      `Pub (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (26, v) ->
                      `Ret (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (27, v) ->
                      `Static (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (28, v) ->
                      `Struct (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (29, v) ->
                      `Trait (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (30, v) ->
                      `Type (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (31, v) ->
                      `Union (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (32, v) ->
                      `Unsafe (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (33, v) ->
                      `Use (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (34, v) ->
                      `Where (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (35, v) ->
                      `While (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Ellips (
                  trans_ellipsis (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_token_repetition_pattern ((kind, body) : mt) : CST.token_repetition_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_token_pattern (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_pat_1e84e62 (Run.matcher_token v))
              v4
            ,
            (match v5 with
            | Alt (0, v) ->
                `PLUS (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `STAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `QMARK (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_token_tree_pattern ((kind, body) : mt) : CST.token_tree_pattern =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `LPAR_rep_tok_pat_RPAR (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.repeat
                    (fun v -> trans_token_pattern (Run.matcher_token v))
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `LBRACK_rep_tok_pat_RBRACK (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.repeat
                    (fun v -> trans_token_pattern (Run.matcher_token v))
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `LCURL_rep_tok_pat_RCURL (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.repeat
                    (fun v -> trans_token_pattern (Run.matcher_token v))
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_token_repetition ((kind, body) : mt) : CST.token_repetition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Tok_tree (
                      trans_token_tree (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Tok_repe (
                      trans_token_repetition (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Meta (
                      trans_metavariable (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Choice_choice_lit (
                      (match v with
                      | Alt (0, v) ->
                          `Choice_lit (
                            (match v with
                            | Alt (0, v) ->
                                `Lit (
                                  trans_literal (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Id (
                                  trans_identifier (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `Muta_spec (
                                  trans_mutable_specifier (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `Self (
                                  trans_self (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `Super (
                                  trans_super (Run.matcher_token v)
                                )
                            | Alt (5, v) ->
                                `Crate (
                                  trans_crate (Run.matcher_token v)
                                )
                            | Alt (6, v) ->
                                `Choice_u8 (
                                  (match v with
                                  | Alt (0, v) ->
                                      `U8 (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `I8 (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (2, v) ->
                                      `U16 (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `I16 (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (4, v) ->
                                      `U32 (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (5, v) ->
                                      `I32 (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (6, v) ->
                                      `U64 (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (7, v) ->
                                      `I64 (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (8, v) ->
                                      `U128 (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (9, v) ->
                                      `I128 (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (10, v) ->
                                      `Isize (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (11, v) ->
                                      `Usize (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (12, v) ->
                                      `F32 (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (13, v) ->
                                      `F64 (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (14, v) ->
                                      `Bool (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (15, v) ->
                                      `Str (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (16, v) ->
                                      `Char (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | Alt (7, v) ->
                                `Rep1_choice_SLASH (
                                  Run.repeat1
                                    (fun v ->
                                      (match v with
                                      | Alt (0, v) ->
                                          `SLASH (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (1, v) ->
                                          `X__ (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (2, v) ->
                                          `BSLASH (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (3, v) ->
                                          `DASH (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (4, v) ->
                                          `EQ (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (5, v) ->
                                          `DASHGT (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (6, v) ->
                                          `COMMA (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (7, v) ->
                                          `SEMI (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (8, v) ->
                                          `COLON (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (9, v) ->
                                          `COLONCOLON (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (10, v) ->
                                          `BANG (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (11, v) ->
                                          `QMARK (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (12, v) ->
                                          `DOT (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (13, v) ->
                                          `AT (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (14, v) ->
                                          `STAR (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (15, v) ->
                                          `AMP (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (16, v) ->
                                          `HASH (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (17, v) ->
                                          `PERC (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (18, v) ->
                                          `HAT (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (19, v) ->
                                          `PLUS (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (20, v) ->
                                          `LT (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (21, v) ->
                                          `GT (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (22, v) ->
                                          `BAR (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (23, v) ->
                                          `TILDE (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                    v
                                )
                            | Alt (8, v) ->
                                `SQUOT (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (9, v) ->
                                `As (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (10, v) ->
                                `Async (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (11, v) ->
                                `Await (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (12, v) ->
                                `Brk (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (13, v) ->
                                `Const (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (14, v) ->
                                `Cont (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (15, v) ->
                                `Defa (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (16, v) ->
                                `Enum (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (17, v) ->
                                `Fn (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (18, v) ->
                                `For (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (19, v) ->
                                `If (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (20, v) ->
                                `Impl (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (21, v) ->
                                `Let (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (22, v) ->
                                `Loop (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (23, v) ->
                                `Match (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (24, v) ->
                                `Mod (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (25, v) ->
                                `Pub (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (26, v) ->
                                `Ret (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (27, v) ->
                                `Static (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (28, v) ->
                                `Struct (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (29, v) ->
                                `Trait (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (30, v) ->
                                `Type (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (31, v) ->
                                `Union (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (32, v) ->
                                `Unsafe (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (33, v) ->
                                `Use (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (34, v) ->
                                `Where (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (35, v) ->
                                `While (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (1, v) ->
                          `Ellips (
                            trans_ellipsis (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_pat_1e84e62 (Run.matcher_token v))
              v4
            ,
            (match v5 with
            | Alt (0, v) ->
                `PLUS (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `STAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `QMARK (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_token_tree ((kind, body) : mt) : CST.token_tree =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `LPAR_rep_choice_tok_tree_RPAR (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Tok_tree (
                            trans_token_tree (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Tok_repe (
                            trans_token_repetition (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Meta (
                            trans_metavariable (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Choice_choice_lit (
                            (match v with
                            | Alt (0, v) ->
                                `Choice_lit (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Lit (
                                        trans_literal (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Id (
                                        trans_identifier (Run.matcher_token v)
                                      )
                                  | Alt (2, v) ->
                                      `Muta_spec (
                                        trans_mutable_specifier (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `Self (
                                        trans_self (Run.matcher_token v)
                                      )
                                  | Alt (4, v) ->
                                      `Super (
                                        trans_super (Run.matcher_token v)
                                      )
                                  | Alt (5, v) ->
                                      `Crate (
                                        trans_crate (Run.matcher_token v)
                                      )
                                  | Alt (6, v) ->
                                      `Choice_u8 (
                                        (match v with
                                        | Alt (0, v) ->
                                            `U8 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (1, v) ->
                                            `I8 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (2, v) ->
                                            `U16 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (3, v) ->
                                            `I16 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (4, v) ->
                                            `U32 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (5, v) ->
                                            `I32 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (6, v) ->
                                            `U64 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (7, v) ->
                                            `I64 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (8, v) ->
                                            `U128 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (9, v) ->
                                            `I128 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (10, v) ->
                                            `Isize (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (11, v) ->
                                            `Usize (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (12, v) ->
                                            `F32 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (13, v) ->
                                            `F64 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (14, v) ->
                                            `Bool (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (15, v) ->
                                            `Str (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (16, v) ->
                                            `Char (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | _ -> assert false
                                        )
                                      )
                                  | Alt (7, v) ->
                                      `Rep1_choice_SLASH (
                                        Run.repeat1
                                          (fun v ->
                                            (match v with
                                            | Alt (0, v) ->
                                                `SLASH (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (1, v) ->
                                                `X__ (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (2, v) ->
                                                `BSLASH (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (3, v) ->
                                                `DASH (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (4, v) ->
                                                `EQ (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (5, v) ->
                                                `DASHGT (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (6, v) ->
                                                `COMMA (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (7, v) ->
                                                `SEMI (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (8, v) ->
                                                `COLON (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (9, v) ->
                                                `COLONCOLON (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (10, v) ->
                                                `BANG (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (11, v) ->
                                                `QMARK (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (12, v) ->
                                                `DOT (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (13, v) ->
                                                `AT (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (14, v) ->
                                                `STAR (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (15, v) ->
                                                `AMP (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (16, v) ->
                                                `HASH (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (17, v) ->
                                                `PERC (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (18, v) ->
                                                `HAT (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (19, v) ->
                                                `PLUS (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (20, v) ->
                                                `LT (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (21, v) ->
                                                `GT (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (22, v) ->
                                                `BAR (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (23, v) ->
                                                `TILDE (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | _ -> assert false
                                            )
                                          )
                                          v
                                      )
                                  | Alt (8, v) ->
                                      `SQUOT (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (9, v) ->
                                      `As (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (10, v) ->
                                      `Async (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (11, v) ->
                                      `Await (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (12, v) ->
                                      `Brk (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (13, v) ->
                                      `Const (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (14, v) ->
                                      `Cont (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (15, v) ->
                                      `Defa (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (16, v) ->
                                      `Enum (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (17, v) ->
                                      `Fn (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (18, v) ->
                                      `For (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (19, v) ->
                                      `If (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (20, v) ->
                                      `Impl (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (21, v) ->
                                      `Let (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (22, v) ->
                                      `Loop (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (23, v) ->
                                      `Match (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (24, v) ->
                                      `Mod (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (25, v) ->
                                      `Pub (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (26, v) ->
                                      `Ret (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (27, v) ->
                                      `Static (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (28, v) ->
                                      `Struct (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (29, v) ->
                                      `Trait (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (30, v) ->
                                      `Type (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (31, v) ->
                                      `Union (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (32, v) ->
                                      `Unsafe (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (33, v) ->
                                      `Use (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (34, v) ->
                                      `Where (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (35, v) ->
                                      `While (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | Alt (1, v) ->
                                `Ellips (
                                  trans_ellipsis (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `LBRACK_rep_choice_tok_tree_RBRACK (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Tok_tree (
                            trans_token_tree (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Tok_repe (
                            trans_token_repetition (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Meta (
                            trans_metavariable (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Choice_choice_lit (
                            (match v with
                            | Alt (0, v) ->
                                `Choice_lit (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Lit (
                                        trans_literal (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Id (
                                        trans_identifier (Run.matcher_token v)
                                      )
                                  | Alt (2, v) ->
                                      `Muta_spec (
                                        trans_mutable_specifier (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `Self (
                                        trans_self (Run.matcher_token v)
                                      )
                                  | Alt (4, v) ->
                                      `Super (
                                        trans_super (Run.matcher_token v)
                                      )
                                  | Alt (5, v) ->
                                      `Crate (
                                        trans_crate (Run.matcher_token v)
                                      )
                                  | Alt (6, v) ->
                                      `Choice_u8 (
                                        (match v with
                                        | Alt (0, v) ->
                                            `U8 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (1, v) ->
                                            `I8 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (2, v) ->
                                            `U16 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (3, v) ->
                                            `I16 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (4, v) ->
                                            `U32 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (5, v) ->
                                            `I32 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (6, v) ->
                                            `U64 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (7, v) ->
                                            `I64 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (8, v) ->
                                            `U128 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (9, v) ->
                                            `I128 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (10, v) ->
                                            `Isize (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (11, v) ->
                                            `Usize (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (12, v) ->
                                            `F32 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (13, v) ->
                                            `F64 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (14, v) ->
                                            `Bool (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (15, v) ->
                                            `Str (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (16, v) ->
                                            `Char (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | _ -> assert false
                                        )
                                      )
                                  | Alt (7, v) ->
                                      `Rep1_choice_SLASH (
                                        Run.repeat1
                                          (fun v ->
                                            (match v with
                                            | Alt (0, v) ->
                                                `SLASH (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (1, v) ->
                                                `X__ (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (2, v) ->
                                                `BSLASH (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (3, v) ->
                                                `DASH (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (4, v) ->
                                                `EQ (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (5, v) ->
                                                `DASHGT (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (6, v) ->
                                                `COMMA (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (7, v) ->
                                                `SEMI (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (8, v) ->
                                                `COLON (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (9, v) ->
                                                `COLONCOLON (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (10, v) ->
                                                `BANG (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (11, v) ->
                                                `QMARK (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (12, v) ->
                                                `DOT (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (13, v) ->
                                                `AT (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (14, v) ->
                                                `STAR (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (15, v) ->
                                                `AMP (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (16, v) ->
                                                `HASH (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (17, v) ->
                                                `PERC (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (18, v) ->
                                                `HAT (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (19, v) ->
                                                `PLUS (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (20, v) ->
                                                `LT (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (21, v) ->
                                                `GT (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (22, v) ->
                                                `BAR (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (23, v) ->
                                                `TILDE (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | _ -> assert false
                                            )
                                          )
                                          v
                                      )
                                  | Alt (8, v) ->
                                      `SQUOT (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (9, v) ->
                                      `As (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (10, v) ->
                                      `Async (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (11, v) ->
                                      `Await (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (12, v) ->
                                      `Brk (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (13, v) ->
                                      `Const (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (14, v) ->
                                      `Cont (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (15, v) ->
                                      `Defa (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (16, v) ->
                                      `Enum (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (17, v) ->
                                      `Fn (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (18, v) ->
                                      `For (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (19, v) ->
                                      `If (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (20, v) ->
                                      `Impl (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (21, v) ->
                                      `Let (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (22, v) ->
                                      `Loop (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (23, v) ->
                                      `Match (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (24, v) ->
                                      `Mod (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (25, v) ->
                                      `Pub (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (26, v) ->
                                      `Ret (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (27, v) ->
                                      `Static (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (28, v) ->
                                      `Struct (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (29, v) ->
                                      `Trait (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (30, v) ->
                                      `Type (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (31, v) ->
                                      `Union (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (32, v) ->
                                      `Unsafe (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (33, v) ->
                                      `Use (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (34, v) ->
                                      `Where (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (35, v) ->
                                      `While (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | Alt (1, v) ->
                                `Ellips (
                                  trans_ellipsis (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `LCURL_rep_choice_tok_tree_RCURL (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Tok_tree (
                            trans_token_tree (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Tok_repe (
                            trans_token_repetition (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Meta (
                            trans_metavariable (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Choice_choice_lit (
                            (match v with
                            | Alt (0, v) ->
                                `Choice_lit (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Lit (
                                        trans_literal (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Id (
                                        trans_identifier (Run.matcher_token v)
                                      )
                                  | Alt (2, v) ->
                                      `Muta_spec (
                                        trans_mutable_specifier (Run.matcher_token v)
                                      )
                                  | Alt (3, v) ->
                                      `Self (
                                        trans_self (Run.matcher_token v)
                                      )
                                  | Alt (4, v) ->
                                      `Super (
                                        trans_super (Run.matcher_token v)
                                      )
                                  | Alt (5, v) ->
                                      `Crate (
                                        trans_crate (Run.matcher_token v)
                                      )
                                  | Alt (6, v) ->
                                      `Choice_u8 (
                                        (match v with
                                        | Alt (0, v) ->
                                            `U8 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (1, v) ->
                                            `I8 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (2, v) ->
                                            `U16 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (3, v) ->
                                            `I16 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (4, v) ->
                                            `U32 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (5, v) ->
                                            `I32 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (6, v) ->
                                            `U64 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (7, v) ->
                                            `I64 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (8, v) ->
                                            `U128 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (9, v) ->
                                            `I128 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (10, v) ->
                                            `Isize (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (11, v) ->
                                            `Usize (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (12, v) ->
                                            `F32 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (13, v) ->
                                            `F64 (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (14, v) ->
                                            `Bool (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (15, v) ->
                                            `Str (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | Alt (16, v) ->
                                            `Char (
                                              Run.trans_token (Run.matcher_token v)
                                            )
                                        | _ -> assert false
                                        )
                                      )
                                  | Alt (7, v) ->
                                      `Rep1_choice_SLASH (
                                        Run.repeat1
                                          (fun v ->
                                            (match v with
                                            | Alt (0, v) ->
                                                `SLASH (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (1, v) ->
                                                `X__ (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (2, v) ->
                                                `BSLASH (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (3, v) ->
                                                `DASH (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (4, v) ->
                                                `EQ (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (5, v) ->
                                                `DASHGT (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (6, v) ->
                                                `COMMA (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (7, v) ->
                                                `SEMI (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (8, v) ->
                                                `COLON (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (9, v) ->
                                                `COLONCOLON (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (10, v) ->
                                                `BANG (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (11, v) ->
                                                `QMARK (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (12, v) ->
                                                `DOT (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (13, v) ->
                                                `AT (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (14, v) ->
                                                `STAR (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (15, v) ->
                                                `AMP (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (16, v) ->
                                                `HASH (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (17, v) ->
                                                `PERC (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (18, v) ->
                                                `HAT (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (19, v) ->
                                                `PLUS (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (20, v) ->
                                                `LT (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (21, v) ->
                                                `GT (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (22, v) ->
                                                `BAR (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | Alt (23, v) ->
                                                `TILDE (
                                                  Run.trans_token (Run.matcher_token v)
                                                )
                                            | _ -> assert false
                                            )
                                          )
                                          v
                                      )
                                  | Alt (8, v) ->
                                      `SQUOT (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (9, v) ->
                                      `As (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (10, v) ->
                                      `Async (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (11, v) ->
                                      `Await (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (12, v) ->
                                      `Brk (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (13, v) ->
                                      `Const (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (14, v) ->
                                      `Cont (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (15, v) ->
                                      `Defa (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (16, v) ->
                                      `Enum (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (17, v) ->
                                      `Fn (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (18, v) ->
                                      `For (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (19, v) ->
                                      `If (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (20, v) ->
                                      `Impl (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (21, v) ->
                                      `Let (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (22, v) ->
                                      `Loop (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (23, v) ->
                                      `Match (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (24, v) ->
                                      `Mod (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (25, v) ->
                                      `Pub (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (26, v) ->
                                      `Ret (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (27, v) ->
                                      `Static (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (28, v) ->
                                      `Struct (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (29, v) ->
                                      `Trait (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (30, v) ->
                                      `Type (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (31, v) ->
                                      `Union (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (32, v) ->
                                      `Unsafe (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (33, v) ->
                                      `Use (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (34, v) ->
                                      `Where (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (35, v) ->
                                      `While (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | Alt (1, v) ->
                                `Ellips (
                                  trans_ellipsis (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_non_delim_token ((kind, body) : mt) : CST.non_delim_token =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_choice_lit (
            (match v with
            | Alt (0, v) ->
                `Choice_lit (
                  (match v with
                  | Alt (0, v) ->
                      `Lit (
                        trans_literal (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Id (
                        trans_identifier (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Muta_spec (
                        trans_mutable_specifier (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Self (
                        trans_self (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Super (
                        trans_super (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Crate (
                        trans_crate (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Choice_u8 (
                        (match v with
                        | Alt (0, v) ->
                            `U8 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `I8 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `U16 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `I16 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `U32 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `I32 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `U64 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `I64 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `U128 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (9, v) ->
                            `I128 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (10, v) ->
                            `Isize (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (11, v) ->
                            `Usize (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (12, v) ->
                            `F32 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (13, v) ->
                            `F64 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (14, v) ->
                            `Bool (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (15, v) ->
                            `Str (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (16, v) ->
                            `Char (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (7, v) ->
                      `Rep1_choice_SLASH (
                        Run.repeat1
                          (fun v ->
                            (match v with
                            | Alt (0, v) ->
                                `SLASH (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `X__ (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `BSLASH (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `DASH (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `EQ (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (5, v) ->
                                `DASHGT (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (6, v) ->
                                `COMMA (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (7, v) ->
                                `SEMI (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (8, v) ->
                                `COLON (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (9, v) ->
                                `COLONCOLON (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (10, v) ->
                                `BANG (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (11, v) ->
                                `QMARK (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (12, v) ->
                                `DOT (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (13, v) ->
                                `AT (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (14, v) ->
                                `STAR (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (15, v) ->
                                `AMP (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (16, v) ->
                                `HASH (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (17, v) ->
                                `PERC (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (18, v) ->
                                `HAT (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (19, v) ->
                                `PLUS (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (20, v) ->
                                `LT (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (21, v) ->
                                `GT (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (22, v) ->
                                `BAR (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (23, v) ->
                                `TILDE (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                          v
                      )
                  | Alt (8, v) ->
                      `SQUOT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `As (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Async (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (11, v) ->
                      `Await (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `Brk (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (13, v) ->
                      `Const (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (14, v) ->
                      `Cont (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (15, v) ->
                      `Defa (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (16, v) ->
                      `Enum (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (17, v) ->
                      `Fn (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (18, v) ->
                      `For (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (19, v) ->
                      `If (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (20, v) ->
                      `Impl (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (21, v) ->
                      `Let (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (22, v) ->
                      `Loop (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (23, v) ->
                      `Match (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (24, v) ->
                      `Mod (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (25, v) ->
                      `Pub (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (26, v) ->
                      `Ret (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (27, v) ->
                      `Static (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (28, v) ->
                      `Struct (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (29, v) ->
                      `Trait (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (30, v) ->
                      `Type (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (31, v) ->
                      `Union (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (32, v) ->
                      `Unsafe (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (33, v) ->
                      `Use (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (34, v) ->
                      `Where (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (35, v) ->
                      `While (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Ellips (
                  trans_ellipsis (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `DOLLAR (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_function_modifiers ((kind, body) : mt) : CST.function_modifiers =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          (match v with
          | Alt (0, v) ->
              `Async (
                Run.trans_token (Run.matcher_token v)
              )
          | Alt (1, v) ->
              `Defa (
                Run.trans_token (Run.matcher_token v)
              )
          | Alt (2, v) ->
              `Const (
                Run.trans_token (Run.matcher_token v)
              )
          | Alt (3, v) ->
              `Unsafe (
                Run.trans_token (Run.matcher_token v)
              )
          | Alt (4, v) ->
              `Extern_modi (
                trans_extern_modifier (Run.matcher_token v)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false


let trans_macro_rule ((kind, body) : mt) : CST.macro_rule =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_token_tree_pattern (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_token_tree (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_delim_token_tree ((kind, body) : mt) : CST.delim_token_tree =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `LPAR_rep_delim_tokens_RPAR (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.repeat
                    (fun v -> trans_delim_tokens (Run.matcher_token v))
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `LBRACK_rep_delim_tokens_RBRACK (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.repeat
                    (fun v -> trans_delim_tokens (Run.matcher_token v))
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `LCURL_rep_delim_tokens_RCURL (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.repeat
                    (fun v -> trans_delim_tokens (Run.matcher_token v))
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_delim_tokens ((kind, body) : mt) : CST.delim_tokens =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Non_delim_tok (
            trans_non_delim_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Delim_tok_tree (
            trans_delim_token_tree (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_macro_definition ((kind, body) : mt) : CST.macro_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_defa (
                  (match v with
                  | Alt (0, v) ->
                      `Defa (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Union (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `LPAR_rep_macro_rule_SEMI_opt_macro_rule_RPAR_SEMI (
                  (match v with
                  | Seq [v0; v1; v2; v3; v4] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  trans_macro_rule (Run.matcher_token v0),
                                  Run.trans_token (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        Run.opt
                          (fun v -> trans_macro_rule (Run.matcher_token v))
                          v2
                        ,
                        Run.trans_token (Run.matcher_token v3),
                        Run.trans_token (Run.matcher_token v4)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `LCURL_rep_macro_rule_SEMI_opt_macro_rule_RCURL (
                  (match v with
                  | Seq [v0; v1; v2; v3] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  trans_macro_rule (Run.matcher_token v0),
                                  Run.trans_token (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        Run.opt
                          (fun v -> trans_macro_rule (Run.matcher_token v))
                          v2
                        ,
                        Run.trans_token (Run.matcher_token v3)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_abstract_type ((kind, body) : mt) : CST.abstract_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_parameters (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Scoped_type_id (
                  trans_scoped_type_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Gene_type (
                  trans_generic_type (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Func_type (
                  trans_function_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_arguments ((kind, body) : mt) : CST.arguments =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.repeat
                        (fun v -> trans_attribute_item (Run.matcher_token v))
                        v0
                      ,
                      trans_expression (Run.matcher_token v1),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1; v2] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                Run.repeat
                                  (fun v -> trans_attribute_item (Run.matcher_token v))
                                  v1
                                ,
                                trans_expression (Run.matcher_token v2)
                              )
                          | _ -> assert false
                          )
                        )
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_expression ((kind, body) : mt) : CST.array_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v -> trans_attribute_item (Run.matcher_token v))
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Exp_SEMI_exp (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_expression (Run.matcher_token v0),
                        Run.trans_token (Run.matcher_token v1),
                        trans_expression (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Opt_rep_attr_item_exp_rep_COMMA_rep_attr_item_exp_opt_COMMA (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.opt
                          (fun v ->
                            (match v with
                            | Seq [v0; v1; v2] ->
                                (
                                  Run.repeat
                                    (fun v -> trans_attribute_item (Run.matcher_token v))
                                    v0
                                  ,
                                  trans_expression (Run.matcher_token v1),
                                  Run.repeat
                                    (fun v ->
                                      (match v with
                                      | Seq [v0; v1; v2] ->
                                          (
                                            Run.trans_token (Run.matcher_token v0),
                                            Run.repeat
                                              (fun v -> trans_attribute_item (Run.matcher_token v))
                                              v1
                                            ,
                                            trans_expression (Run.matcher_token v2)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                    v2
                                )
                            | _ -> assert false
                            )
                          )
                          v0
                        ,
                        Run.opt
                          (fun v -> Run.trans_token (Run.matcher_token v))
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_type ((kind, body) : mt) : CST.array_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_assignment_expression ((kind, body) : mt) : CST.assignment_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_associated_type ((kind, body) : mt) : CST.associated_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v -> trans_trait_bounds (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_async_block ((kind, body) : mt) : CST.async_block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            trans_block (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_attribute ((kind, body) : mt) : CST.attribute =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Self (
                  trans_self (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_u8 (
                  (match v with
                  | Alt (0, v) ->
                      `U8 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `I8 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `U16 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `I16 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `U32 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `I32 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `U64 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `I64 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `U128 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `I128 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Isize (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (11, v) ->
                      `Usize (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `F32 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (13, v) ->
                      `F64 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (14, v) ->
                      `Bool (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (15, v) ->
                      `Str (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (16, v) ->
                      `Char (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Meta (
                  trans_metavariable (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Super (
                  trans_super (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Crate (
                  trans_crate (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Scoped_id (
                  trans_scoped_identifier (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Choice_defa (
                  (match v with
                  | Alt (0, v) ->
                      `Defa (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Union (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `EQ_exp (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_expression (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Delim_tok_tree (
                      trans_delim_token_tree (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_attribute_item ((kind, body) : mt) : CST.attribute_item =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_attribute (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_await_expression ((kind, body) : mt) : CST.await_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_base_field_initializer ((kind, body) : mt) : CST.base_field_initializer =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_binary_expression ((kind, body) : mt) : CST.binary_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp_AMPAMP_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Exp_BARBAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Exp_AMP_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Exp_BAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Exp_HAT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (5, v) ->
          `Exp_choice_EQEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `EQEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `BANGEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `LT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `LTEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `GT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `GTEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (6, v) ->
          `Exp_choice_LTLT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `LTLT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `GTGT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (7, v) ->
          `Exp_choice_PLUS_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `PLUS (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `DASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (8, v) ->
          `Exp_choice_STAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `STAR (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `SLASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `PERC (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_block ((kind, body) : mt) : CST.block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_label (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_statement (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v -> trans_expression (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_bounded_type ((kind, body) : mt) : CST.bounded_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Life_PLUS_type (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_lifetime (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_type_ (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Type_PLUS_type (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_type_ (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_type_ (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Type_PLUS_life (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_type_ (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_lifetime (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_bracketed_type ((kind, body) : mt) : CST.bracketed_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Type (
                  trans_type_ (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Qual_type (
                  trans_qualified_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_break_expression ((kind, body) : mt) : CST.break_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_label (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> trans_expression (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_call_expression ((kind, body) : mt) : CST.call_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_expression_except_range (Run.matcher_token v0),
            trans_arguments (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_captured_pattern ((kind, body) : mt) : CST.captured_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_pattern (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_closure_expression ((kind, body) : mt) : CST.closure_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            trans_closure_parameters (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Opt_DASHGT_type_blk (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.opt
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  trans_type_ (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v0
                        ,
                        trans_block (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Choice_exp (
                  (match v with
                  | Alt (0, v) ->
                      `Exp (
                        trans_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `X__ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_closure_parameters ((kind, body) : mt) : CST.closure_parameters =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Pat (
                            trans_pattern (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Param (
                            trans_parameter (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Pat (
                                      trans_pattern (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Param (
                                      trans_parameter (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_compound_assignment_expr ((kind, body) : mt) : CST.compound_assignment_expr =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `PLUSEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `DASHEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `STAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `SLASHEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `PERCEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `AMPEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `BAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `HATEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `LTLTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `GTGTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_condition ((kind, body) : mt) : CST.condition =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp (
            trans_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Let_cond (
            trans_let_condition (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Let_chain (
            trans_let_chain (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_const_block ((kind, body) : mt) : CST.const_block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_block (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_const_item ((kind, body) : mt) : CST.const_item =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.opt
              (fun v -> trans_visibility_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            trans_type_ (Run.matcher_token v4),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v5
            ,
            Run.trans_token (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_const_parameter ((kind, body) : mt) : CST.const_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_type_ (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_constrained_type_parameter ((kind, body) : mt) : CST.constrained_type_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Life (
                  trans_lifetime (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_trait_bounds (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_declaration_list ((kind, body) : mt) : CST.declaration_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_const_item (
                      (match v with
                      | Alt (0, v) ->
                          `Const_item (
                            trans_const_item (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Macro_invo (
                            trans_macro_invocation (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Macro_defi (
                            trans_macro_definition (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Empty_stmt (
                            trans_empty_statement (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Attr_item (
                            trans_attribute_item (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Inner_attr_item (
                            trans_inner_attribute_item (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Mod_item (
                            trans_mod_item (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `Fore_mod_item (
                            trans_foreign_mod_item (Run.matcher_token v)
                          )
                      | Alt (8, v) ->
                          `Struct_item (
                            trans_struct_item (Run.matcher_token v)
                          )
                      | Alt (9, v) ->
                          `Union_item (
                            trans_union_item (Run.matcher_token v)
                          )
                      | Alt (10, v) ->
                          `Enum_item (
                            trans_enum_item (Run.matcher_token v)
                          )
                      | Alt (11, v) ->
                          `Type_item (
                            trans_type_item (Run.matcher_token v)
                          )
                      | Alt (12, v) ->
                          `Func_item (
                            trans_function_item (Run.matcher_token v)
                          )
                      | Alt (13, v) ->
                          `Func_sign_item (
                            trans_function_signature_item (Run.matcher_token v)
                          )
                      | Alt (14, v) ->
                          `Impl_item (
                            trans_impl_item (Run.matcher_token v)
                          )
                      | Alt (15, v) ->
                          `Trait_item (
                            trans_trait_item (Run.matcher_token v)
                          )
                      | Alt (16, v) ->
                          `Asso_type (
                            trans_associated_type (Run.matcher_token v)
                          )
                      | Alt (17, v) ->
                          `Let_decl (
                            trans_let_declaration (Run.matcher_token v)
                          )
                      | Alt (18, v) ->
                          `Use_decl (
                            trans_use_declaration (Run.matcher_token v)
                          )
                      | Alt (19, v) ->
                          `Extern_crate_decl (
                            trans_extern_crate_declaration (Run.matcher_token v)
                          )
                      | Alt (20, v) ->
                          `Static_item (
                            trans_static_item (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Ellips (
                      trans_ellipsis (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_deep_ellipsis ((kind, body) : mt) : CST.deep_ellipsis =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_dynamic_type ((kind, body) : mt) : CST.dynamic_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Scoped_type_id (
                  trans_scoped_type_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Gene_type (
                  trans_generic_type (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Func_type (
                  trans_function_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_else_clause ((kind, body) : mt) : CST.else_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Blk (
                  trans_block (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `If_exp (
                  trans_if_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enum_item ((kind, body) : mt) : CST.enum_item =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.opt
              (fun v -> trans_visibility_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v3
            ,
            Run.opt
              (fun v -> trans_where_clause (Run.matcher_token v))
              v4
            ,
            trans_enum_variant_list (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enum_variant ((kind, body) : mt) : CST.enum_variant =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> trans_visibility_modifier (Run.matcher_token v))
              v0
            ,
            trans_identifier (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Field_decl_list (
                      trans_field_declaration_list (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Orde_field_decl_list (
                      trans_ordered_field_declaration_list (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enum_variant_list ((kind, body) : mt) : CST.enum_variant_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.repeat
                        (fun v -> trans_attribute_item (Run.matcher_token v))
                        v0
                      ,
                      trans_enum_variant (Run.matcher_token v1),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1; v2] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                Run.repeat
                                  (fun v -> trans_attribute_item (Run.matcher_token v))
                                  v1
                                ,
                                trans_enum_variant (Run.matcher_token v2)
                              )
                          | _ -> assert false
                          )
                        )
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression ((kind, body) : mt) : CST.expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp_except_range (
            trans_expression_except_range (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Range_exp (
            trans_range_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Ellips (
            trans_ellipsis (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Deep_ellips (
            trans_deep_ellipsis (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Member_access_ellips_exp (
            trans_member_access_ellipsis_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression_except_range ((kind, body) : mt) : CST.expression_except_range =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Un_exp (
            trans_unary_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Ref_exp (
            trans_reference_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Try_exp (
            trans_try_expression (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Bin_exp (
            trans_binary_expression (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Assign_exp (
            trans_assignment_expression (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Comp_assign_expr (
            trans_compound_assignment_expr (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Type_cast_exp (
            trans_type_cast_expression (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Call_exp (
            trans_call_expression (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Ret_exp (
            trans_return_expression (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Yield_exp (
            trans_yield_expression (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Lit (
            trans_literal (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `Choice_u8 (
            (match v with
            | Alt (0, v) ->
                `U8 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `I8 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `U16 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `I16 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `U32 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `I32 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `U64 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `I64 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `U128 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `I128 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Isize (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Usize (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `F32 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `F64 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `Bool (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Str (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Char (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (13, v) ->
          `Choice_defa (
            (match v with
            | Alt (0, v) ->
                `Defa (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Union (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (14, v) ->
          `Self (
            trans_self (Run.matcher_token v)
          )
      | Alt (15, v) ->
          `Scoped_id (
            trans_scoped_identifier (Run.matcher_token v)
          )
      | Alt (16, v) ->
          `Gene_func (
            trans_generic_function (Run.matcher_token v)
          )
      | Alt (17, v) ->
          `Await_exp (
            trans_await_expression (Run.matcher_token v)
          )
      | Alt (18, v) ->
          `Field_exp (
            trans_field_expression (Run.matcher_token v)
          )
      | Alt (19, v) ->
          `Array_exp (
            trans_array_expression (Run.matcher_token v)
          )
      | Alt (20, v) ->
          `Tuple_exp (
            trans_tuple_expression (Run.matcher_token v)
          )
      | Alt (21, v) ->
          `Macro_invo (
            trans_macro_invocation (Run.matcher_token v)
          )
      | Alt (22, v) ->
          `Unit_exp (
            trans_unit_expression (Run.matcher_token v)
          )
      | Alt (23, v) ->
          `Brk_exp (
            trans_break_expression (Run.matcher_token v)
          )
      | Alt (24, v) ->
          `Cont_exp (
            trans_continue_expression (Run.matcher_token v)
          )
      | Alt (25, v) ->
          `Index_exp (
            trans_index_expression (Run.matcher_token v)
          )
      | Alt (26, v) ->
          `Meta (
            trans_metavariable (Run.matcher_token v)
          )
      | Alt (27, v) ->
          `Clos_exp (
            trans_closure_expression (Run.matcher_token v)
          )
      | Alt (28, v) ->
          `Paren_exp (
            trans_parenthesized_expression (Run.matcher_token v)
          )
      | Alt (29, v) ->
          `Struct_exp (
            trans_struct_expression (Run.matcher_token v)
          )
      | Alt (30, v) ->
          `Choice_unsafe_blk (
            (match v with
            | Alt (0, v) ->
                `Unsafe_blk (
                  trans_unsafe_block (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Async_blk (
                  trans_async_block (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Try_blk (
                  trans_try_block (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Blk (
                  trans_block (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `If_exp (
                  trans_if_expression (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Match_exp (
                  trans_match_expression (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `While_exp (
                  trans_while_expression (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Loop_exp (
                  trans_loop_expression (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `For_exp (
                  trans_for_expression (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Const_blk (
                  trans_const_block (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression_statement ((kind, body) : mt) : CST.expression_statement =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_exp_SEMI (
            (match v with
            | Alt (0, v) ->
                `Exp_SEMI (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_expression (Run.matcher_token v0),
                        Run.trans_token (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Choice_unsafe_blk (
                  (match v with
                  | Alt (0, v) ->
                      `Unsafe_blk (
                        trans_unsafe_block (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Async_blk (
                        trans_async_block (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Try_blk (
                        trans_try_block (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Blk (
                        trans_block (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `If_exp (
                        trans_if_expression (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Match_exp (
                        trans_match_expression (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `While_exp (
                        trans_while_expression (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Loop_exp (
                        trans_loop_expression (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `For_exp (
                        trans_for_expression (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Const_blk (
                        trans_const_block (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Ellips_SEMI (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_ellipsis (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Ellips (
            trans_ellipsis (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_extern_crate_declaration ((kind, body) : mt) : CST.extern_crate_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.opt
              (fun v -> trans_visibility_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_crate (Run.matcher_token v2),
            trans_identifier (Run.matcher_token v3),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_identifier (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_declaration ((kind, body) : mt) : CST.field_declaration =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Opt_visi_modi_id_COLON_type (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  Run.opt
                    (fun v -> trans_visibility_modifier (Run.matcher_token v))
                    v0
                  ,
                  trans_identifier (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2),
                  trans_type_ (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Ellips (
            trans_ellipsis (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_declaration_list ((kind, body) : mt) : CST.field_declaration_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.repeat
                        (fun v -> trans_attribute_item (Run.matcher_token v))
                        v0
                      ,
                      trans_field_declaration (Run.matcher_token v1),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1; v2] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                Run.repeat
                                  (fun v -> trans_attribute_item (Run.matcher_token v))
                                  v1
                                ,
                                trans_field_declaration (Run.matcher_token v2)
                              )
                          | _ -> assert false
                          )
                        )
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_expression ((kind, body) : mt) : CST.field_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Int_lit (
                  trans_integer_literal (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_initializer ((kind, body) : mt) : CST.field_initializer =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.repeat
              (fun v -> trans_attribute_item (Run.matcher_token v))
              v0
            ,
            trans_identifier (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_expression (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_initializer_list ((kind, body) : mt) : CST.field_initializer_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Shor_field_init (
                            trans_shorthand_field_initializer (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Field_init (
                            trans_field_initializer (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Base_field_init (
                            trans_base_field_initializer (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Shor_field_init (
                                      trans_shorthand_field_initializer (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Field_init (
                                      trans_field_initializer (Run.matcher_token v)
                                    )
                                | Alt (2, v) ->
                                    `Base_field_init (
                                      trans_base_field_initializer (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_pattern ((kind, body) : mt) : CST.field_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> trans_mutable_specifier (Run.matcher_token v))
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Id_COLON_pat (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_identifier (Run.matcher_token v0),
                        Run.trans_token (Run.matcher_token v1),
                        trans_pattern (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_for_expression ((kind, body) : mt) : CST.for_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_label (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_pattern (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            trans_expression (Run.matcher_token v4),
            trans_block (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_foreign_mod_item ((kind, body) : mt) : CST.foreign_mod_item =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> trans_visibility_modifier (Run.matcher_token v))
              v0
            ,
            trans_extern_modifier (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Decl_list (
                  trans_declaration_list (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_item ((kind, body) : mt) : CST.function_item =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7; v8] ->
          (
            Run.opt
              (fun v -> trans_visibility_modifier (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> trans_function_modifiers (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Meta (
                  trans_metavariable (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v4
            ,
            trans_parameters (Run.matcher_token v5),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v6
            ,
            Run.opt
              (fun v -> trans_where_clause (Run.matcher_token v))
              v7
            ,
            trans_block (Run.matcher_token v8)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_signature_item ((kind, body) : mt) : CST.function_signature_item =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7; v8] ->
          (
            Run.opt
              (fun v -> trans_visibility_modifier (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> trans_function_modifiers (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Meta (
                  trans_metavariable (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v4
            ,
            trans_parameters (Run.matcher_token v5),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v6
            ,
            Run.opt
              (fun v -> trans_where_clause (Run.matcher_token v))
              v7
            ,
            Run.trans_token (Run.matcher_token v8)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_type ((kind, body) : mt) : CST.function_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> trans_for_lifetimes (Run.matcher_token v))
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `Choice_id (
                  (match v with
                  | Alt (0, v) ->
                      `Id (
                        trans_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Scoped_type_id (
                        trans_scoped_type_identifier (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Opt_func_modifs_fn (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.opt
                          (fun v -> trans_function_modifiers (Run.matcher_token v))
                          v0
                        ,
                        Run.trans_token (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            trans_parameters (Run.matcher_token v2),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_generic_function ((kind, body) : mt) : CST.generic_function =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Scoped_id (
                  trans_scoped_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Field_exp (
                  trans_field_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_type_arguments (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_generic_type ((kind, body) : mt) : CST.generic_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_defa (
                  (match v with
                  | Alt (0, v) ->
                      `Defa (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Union (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Scoped_type_id (
                  trans_scoped_type_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_type_arguments (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_generic_type_with_turbofish ((kind, body) : mt) : CST.generic_type_with_turbofish =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Scoped_id (
                  trans_scoped_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_type_arguments (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_higher_ranked_trait_bound ((kind, body) : mt) : CST.higher_ranked_trait_bound =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_parameters (Run.matcher_token v1),
            trans_type_ (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_if_expression ((kind, body) : mt) : CST.if_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_condition (Run.matcher_token v1),
            trans_block (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_else_clause (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_impl_item ((kind, body) : mt) : CST.impl_item =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v0
                      ,
                      (match v1 with
                      | Alt (0, v) ->
                          `Id (
                            trans_identifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Scoped_type_id (
                            trans_scoped_type_identifier (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Gene_type (
                            trans_generic_type (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.trans_token (Run.matcher_token v2)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            trans_type_ (Run.matcher_token v4),
            Run.opt
              (fun v -> trans_where_clause (Run.matcher_token v))
              v5
            ,
            (match v6 with
            | Alt (0, v) ->
                `Decl_list (
                  trans_declaration_list (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_index_expression ((kind, body) : mt) : CST.index_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_inner_attribute_item ((kind, body) : mt) : CST.inner_attribute_item =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_attribute (Run.matcher_token v3),
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_last_match_arm ((kind, body) : mt) : CST.last_match_arm =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.repeat
              (fun v -> trans_attribute_item (Run.matcher_token v))
              v0
            ,
            trans_match_pattern (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_expression (Run.matcher_token v3),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_let_chain ((kind, body) : mt) : CST.let_chain =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Let_chain_AMPAMP_let_cond (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_let_chain (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_let_condition (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Let_chain_AMPAMP_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_let_chain (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Let_cond_AMPAMP_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_let_condition (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Let_cond_AMPAMP_let_cond (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_let_condition (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_let_condition (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Exp_AMPAMP_let_cond (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_let_condition (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_let_condition ((kind, body) : mt) : CST.let_condition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_pattern (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_expression (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_let_declaration ((kind, body) : mt) : CST.let_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_mutable_specifier (Run.matcher_token v))
              v1
            ,
            trans_pattern (Run.matcher_token v2),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_block (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v5
            ,
            Run.trans_token (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_loop_expression ((kind, body) : mt) : CST.loop_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_label (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_block (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_macro_invocation ((kind, body) : mt) : CST.macro_invocation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Scoped_id (
                  trans_scoped_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Choice_defa (
                  (match v with
                  | Alt (0, v) ->
                      `Defa (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Union (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_delim_token_tree (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_match_arm ((kind, body) : mt) : CST.match_arm =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.repeat
              (fun v -> trans_attribute_item (Run.matcher_token v))
              v0
            ,
            trans_match_pattern (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Exp_COMMA (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_expression (Run.matcher_token v0),
                        Run.trans_token (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Choice_unsafe_blk (
                  (match v with
                  | Alt (0, v) ->
                      `Unsafe_blk (
                        trans_unsafe_block (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Async_blk (
                        trans_async_block (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Try_blk (
                        trans_try_block (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Blk (
                        trans_block (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `If_exp (
                        trans_if_expression (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Match_exp (
                        trans_match_expression (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `While_exp (
                        trans_while_expression (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Loop_exp (
                        trans_loop_expression (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `For_exp (
                        trans_for_expression (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Const_blk (
                        trans_const_block (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_match_block ((kind, body) : mt) : CST.match_block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.repeat
                        (fun v -> trans_match_arm (Run.matcher_token v))
                        v0
                      ,
                      trans_last_match_arm (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_match_expression ((kind, body) : mt) : CST.match_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            trans_match_block (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_match_pattern ((kind, body) : mt) : CST.match_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Pat (
                  trans_pattern (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Clos_exp (
                  trans_closure_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_condition (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_member_access_ellipsis_expression ((kind, body) : mt) : CST.member_access_ellipsis_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_ellipsis (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_mod_item ((kind, body) : mt) : CST.mod_item =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> trans_visibility_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Decl_list (
                  trans_declaration_list (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_mut_pattern ((kind, body) : mt) : CST.mut_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_mutable_specifier (Run.matcher_token v0),
            trans_pattern (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_optional_type_parameter ((kind, body) : mt) : CST.optional_type_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Cons_type_param (
                  trans_constrained_type_parameter (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_type_ (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_or_pattern ((kind, body) : mt) : CST.or_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pattern (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_pattern (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_ordered_field_declaration_list ((kind, body) : mt) : CST.ordered_field_declaration_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2; v3] ->
                    (
                      Run.repeat
                        (fun v -> trans_attribute_item (Run.matcher_token v))
                        v0
                      ,
                      Run.opt
                        (fun v -> trans_visibility_modifier (Run.matcher_token v))
                        v1
                      ,
                      trans_type_ (Run.matcher_token v2),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1; v2; v3] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                Run.repeat
                                  (fun v -> trans_attribute_item (Run.matcher_token v))
                                  v1
                                ,
                                Run.opt
                                  (fun v -> trans_visibility_modifier (Run.matcher_token v))
                                  v2
                                ,
                                trans_type_ (Run.matcher_token v3)
                              )
                          | _ -> assert false
                          )
                        )
                        v3
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parameter ((kind, body) : mt) : CST.parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> trans_mutable_specifier (Run.matcher_token v))
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `Pat (
                  trans_pattern (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Self (
                  trans_self (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2),
            trans_type_ (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parameters ((kind, body) : mt) : CST.parameters =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.opt
                        (fun v -> trans_attribute_item (Run.matcher_token v))
                        v0
                      ,
                      (match v1 with
                      | Alt (0, v) ->
                          `Param (
                            trans_parameter (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Self_param (
                            trans_self_parameter (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Vari_param (
                            trans_variadic_parameter (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `X__ (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Type (
                            trans_type_ (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1; v2] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                Run.opt
                                  (fun v -> trans_attribute_item (Run.matcher_token v))
                                  v1
                                ,
                                (match v2 with
                                | Alt (0, v) ->
                                    `Param (
                                      trans_parameter (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Self_param (
                                      trans_self_parameter (Run.matcher_token v)
                                    )
                                | Alt (2, v) ->
                                    `Vari_param (
                                      trans_variadic_parameter (Run.matcher_token v)
                                    )
                                | Alt (3, v) ->
                                    `X__ (
                                      Run.trans_token (Run.matcher_token v)
                                    )
                                | Alt (4, v) ->
                                    `Type (
                                      trans_type_ (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_expression ((kind, body) : mt) : CST.parenthesized_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Semg_typed_meta (
                  trans_semgrep_typed_metavar (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_pattern ((kind, body) : mt) : CST.pattern =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Lit_pat (
            trans_literal_pattern (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Choice_u8 (
            (match v with
            | Alt (0, v) ->
                `U8 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `I8 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `U16 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `I16 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `U32 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `I32 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `U64 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `I64 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `U128 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `I128 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Isize (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Usize (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `F32 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `F64 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `Bool (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Str (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Char (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Scoped_id (
            trans_scoped_identifier (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Tuple_pat (
            trans_tuple_pattern (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Tuple_struct_pat (
            trans_tuple_struct_pattern (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Struct_pat (
            trans_struct_pattern (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Choice_defa (
            (match v with
            | Alt (0, v) ->
                `Defa (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Union (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (8, v) ->
          `Ref_pat_a3d7f54 (
            trans_ref_pattern (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Slice_pat (
            trans_slice_pattern (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Capt_pat (
            trans_captured_pattern (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Ref_pat_dbbcf07 (
            trans_reference_pattern (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `Rema_field_pat (
            trans_remaining_field_pattern (Run.matcher_token v)
          )
      | Alt (13, v) ->
          `Mut_pat (
            trans_mut_pattern (Run.matcher_token v)
          )
      | Alt (14, v) ->
          `Range_pat (
            trans_range_pattern (Run.matcher_token v)
          )
      | Alt (15, v) ->
          `Or_pat (
            trans_or_pattern (Run.matcher_token v)
          )
      | Alt (16, v) ->
          `Const_blk (
            trans_const_block (Run.matcher_token v)
          )
      | Alt (17, v) ->
          `Macro_invo (
            trans_macro_invocation (Run.matcher_token v)
          )
      | Alt (18, v) ->
          `X__ (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_pointer_type ((kind, body) : mt) : CST.pointer_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Const (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Muta_spec (
                  trans_mutable_specifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_type_ (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_qualified_type ((kind, body) : mt) : CST.qualified_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_type_ (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_type_ (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_range_expression ((kind, body) : mt) : CST.range_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp_choice_DOTDOT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `DOTDOT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `DOTDOTDOT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `DOTDOTEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Exp_DOTDOT (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `DOTDOT_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `DOTDOT (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_range_pattern ((kind, body) : mt) : CST.range_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Lit_pat (
                  trans_literal_pattern (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_self (
                  (match v with
                  | Alt (0, v) ->
                      `Self (
                        trans_self (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Choice_u8 (
                        (match v with
                        | Alt (0, v) ->
                            `U8 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `I8 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `U16 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `I16 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `U32 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `I32 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `U64 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `I64 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `U128 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (9, v) ->
                            `I128 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (10, v) ->
                            `Isize (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (11, v) ->
                            `Usize (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (12, v) ->
                            `F32 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (13, v) ->
                            `F64 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (14, v) ->
                            `Bool (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (15, v) ->
                            `Str (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (16, v) ->
                            `Char (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (2, v) ->
                      `Meta (
                        trans_metavariable (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Super (
                        trans_super (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Crate (
                        trans_crate (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Id (
                        trans_identifier (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Scoped_id (
                        trans_scoped_identifier (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Choice_defa (
                        (match v with
                        | Alt (0, v) ->
                            `Defa (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Union (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `DOTDOTDOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `DOTDOTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `Lit_pat (
                  trans_literal_pattern (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_self (
                  (match v with
                  | Alt (0, v) ->
                      `Self (
                        trans_self (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Choice_u8 (
                        (match v with
                        | Alt (0, v) ->
                            `U8 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `I8 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `U16 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `I16 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `U32 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `I32 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (6, v) ->
                            `U64 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (7, v) ->
                            `I64 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (8, v) ->
                            `U128 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (9, v) ->
                            `I128 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (10, v) ->
                            `Isize (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (11, v) ->
                            `Usize (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (12, v) ->
                            `F32 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (13, v) ->
                            `F64 (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (14, v) ->
                            `Bool (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (15, v) ->
                            `Str (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (16, v) ->
                            `Char (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (2, v) ->
                      `Meta (
                        trans_metavariable (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Super (
                        trans_super (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Crate (
                        trans_crate (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Id (
                        trans_identifier (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Scoped_id (
                        trans_scoped_identifier (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Choice_defa (
                        (match v with
                        | Alt (0, v) ->
                            `Defa (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Union (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_ref_pattern ((kind, body) : mt) : CST.ref_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_pattern (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_reference_expression ((kind, body) : mt) : CST.reference_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_mutable_specifier (Run.matcher_token v))
              v1
            ,
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_reference_pattern ((kind, body) : mt) : CST.reference_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_mutable_specifier (Run.matcher_token v))
              v1
            ,
            trans_pattern (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_reference_type ((kind, body) : mt) : CST.reference_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_lifetime (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> trans_mutable_specifier (Run.matcher_token v))
              v2
            ,
            trans_type_ (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_removed_trait_bound ((kind, body) : mt) : CST.removed_trait_bound =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_return_expression ((kind, body) : mt) : CST.return_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Ret_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Ret (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_scoped_identifier ((kind, body) : mt) : CST.scoped_identifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_self (
                      (match v with
                      | Alt (0, v) ->
                          `Self (
                            trans_self (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Choice_u8 (
                            (match v with
                            | Alt (0, v) ->
                                `U8 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `I8 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `U16 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `I16 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `U32 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (5, v) ->
                                `I32 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (6, v) ->
                                `U64 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (7, v) ->
                                `I64 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (8, v) ->
                                `U128 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (9, v) ->
                                `I128 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (10, v) ->
                                `Isize (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (11, v) ->
                                `Usize (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (12, v) ->
                                `F32 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (13, v) ->
                                `F64 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (14, v) ->
                                `Bool (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (15, v) ->
                                `Str (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (16, v) ->
                                `Char (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (2, v) ->
                          `Meta (
                            trans_metavariable (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Super (
                            trans_super (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Crate (
                            trans_crate (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Id (
                            trans_identifier (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Scoped_id (
                            trans_scoped_identifier (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `Choice_defa (
                            (match v with
                            | Alt (0, v) ->
                                `Defa (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Union (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Brac_type (
                      trans_bracketed_type (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Gene_type_with_turb (
                      trans_generic_type_with_turbofish (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Super (
                  trans_super (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_scoped_type_identifier ((kind, body) : mt) : CST.scoped_type_identifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_self (
                      (match v with
                      | Alt (0, v) ->
                          `Self (
                            trans_self (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Choice_u8 (
                            (match v with
                            | Alt (0, v) ->
                                `U8 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `I8 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `U16 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `I16 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `U32 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (5, v) ->
                                `I32 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (6, v) ->
                                `U64 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (7, v) ->
                                `I64 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (8, v) ->
                                `U128 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (9, v) ->
                                `I128 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (10, v) ->
                                `Isize (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (11, v) ->
                                `Usize (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (12, v) ->
                                `F32 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (13, v) ->
                                `F64 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (14, v) ->
                                `Bool (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (15, v) ->
                                `Str (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (16, v) ->
                                `Char (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (2, v) ->
                          `Meta (
                            trans_metavariable (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Super (
                            trans_super (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Crate (
                            trans_crate (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Id (
                            trans_identifier (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Scoped_id (
                            trans_scoped_identifier (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `Choice_defa (
                            (match v with
                            | Alt (0, v) ->
                                `Defa (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Union (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Gene_type_with_turb (
                      trans_generic_type_with_turbofish (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Brac_type (
                      trans_bracketed_type (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Gene_type (
                      trans_generic_type (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_scoped_type_identifier_in_expression_position ((kind, body) : mt) : CST.scoped_type_identifier_in_expression_position =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_self (
                      (match v with
                      | Alt (0, v) ->
                          `Self (
                            trans_self (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Choice_u8 (
                            (match v with
                            | Alt (0, v) ->
                                `U8 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `I8 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `U16 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `I16 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `U32 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (5, v) ->
                                `I32 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (6, v) ->
                                `U64 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (7, v) ->
                                `I64 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (8, v) ->
                                `U128 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (9, v) ->
                                `I128 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (10, v) ->
                                `Isize (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (11, v) ->
                                `Usize (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (12, v) ->
                                `F32 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (13, v) ->
                                `F64 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (14, v) ->
                                `Bool (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (15, v) ->
                                `Str (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (16, v) ->
                                `Char (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (2, v) ->
                          `Meta (
                            trans_metavariable (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Super (
                            trans_super (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Crate (
                            trans_crate (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Id (
                            trans_identifier (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Scoped_id (
                            trans_scoped_identifier (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `Choice_defa (
                            (match v with
                            | Alt (0, v) ->
                                `Defa (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Union (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Gene_type_with_turb (
                      trans_generic_type_with_turbofish (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_scoped_use_list ((kind, body) : mt) : CST.scoped_use_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Self (
                      trans_self (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Choice_u8 (
                      (match v with
                      | Alt (0, v) ->
                          `U8 (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `I8 (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `U16 (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `I16 (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `U32 (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `I32 (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `U64 (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `I64 (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (8, v) ->
                          `U128 (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (9, v) ->
                          `I128 (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (10, v) ->
                          `Isize (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (11, v) ->
                          `Usize (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (12, v) ->
                          `F32 (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (13, v) ->
                          `F64 (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (14, v) ->
                          `Bool (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (15, v) ->
                          `Str (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (16, v) ->
                          `Char (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (2, v) ->
                    `Meta (
                      trans_metavariable (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Super (
                      trans_super (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `Crate (
                      trans_crate (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Id (
                      trans_identifier (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Scoped_id (
                      trans_scoped_identifier (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Choice_defa (
                      (match v with
                      | Alt (0, v) ->
                          `Defa (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Union (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_use_list (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_semgrep_typed_metavar ((kind, body) : mt) : CST.semgrep_typed_metavar =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_type_ (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_shorthand_field_initializer ((kind, body) : mt) : CST.shorthand_field_initializer =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.repeat
              (fun v -> trans_attribute_item (Run.matcher_token v))
              v0
            ,
            trans_identifier (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_slice_pattern ((kind, body) : mt) : CST.slice_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_pattern (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_pattern (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_statement ((kind, body) : mt) : CST.statement =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp_stmt (
            trans_expression_statement (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Choice_choice_const_item (
            (match v with
            | Alt (0, v) ->
                `Choice_const_item (
                  (match v with
                  | Alt (0, v) ->
                      `Const_item (
                        trans_const_item (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Macro_invo (
                        trans_macro_invocation (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Macro_defi (
                        trans_macro_definition (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Empty_stmt (
                        trans_empty_statement (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Attr_item (
                        trans_attribute_item (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Inner_attr_item (
                        trans_inner_attribute_item (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Mod_item (
                        trans_mod_item (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Fore_mod_item (
                        trans_foreign_mod_item (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `Struct_item (
                        trans_struct_item (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `Union_item (
                        trans_union_item (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Enum_item (
                        trans_enum_item (Run.matcher_token v)
                      )
                  | Alt (11, v) ->
                      `Type_item (
                        trans_type_item (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `Func_item (
                        trans_function_item (Run.matcher_token v)
                      )
                  | Alt (13, v) ->
                      `Func_sign_item (
                        trans_function_signature_item (Run.matcher_token v)
                      )
                  | Alt (14, v) ->
                      `Impl_item (
                        trans_impl_item (Run.matcher_token v)
                      )
                  | Alt (15, v) ->
                      `Trait_item (
                        trans_trait_item (Run.matcher_token v)
                      )
                  | Alt (16, v) ->
                      `Asso_type (
                        trans_associated_type (Run.matcher_token v)
                      )
                  | Alt (17, v) ->
                      `Let_decl (
                        trans_let_declaration (Run.matcher_token v)
                      )
                  | Alt (18, v) ->
                      `Use_decl (
                        trans_use_declaration (Run.matcher_token v)
                      )
                  | Alt (19, v) ->
                      `Extern_crate_decl (
                        trans_extern_crate_declaration (Run.matcher_token v)
                      )
                  | Alt (20, v) ->
                      `Static_item (
                        trans_static_item (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Ellips (
                  trans_ellipsis (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_static_item ((kind, body) : mt) : CST.static_item =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7; v8] ->
          (
            Run.opt
              (fun v -> trans_visibility_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v -> trans_mutable_specifier (Run.matcher_token v))
              v3
            ,
            trans_identifier (Run.matcher_token v4),
            Run.trans_token (Run.matcher_token v5),
            trans_type_ (Run.matcher_token v6),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v7
            ,
            Run.trans_token (Run.matcher_token v8)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_struct_expression ((kind, body) : mt) : CST.struct_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Scoped_type_id_in_exp_posi (
                  trans_scoped_type_identifier_in_expression_position (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Gene_type_with_turb (
                  trans_generic_type_with_turbofish (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_field_initializer_list (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_struct_item ((kind, body) : mt) : CST.struct_item =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> trans_visibility_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v3
            ,
            (match v4 with
            | Alt (0, v) ->
                `Opt_where_clause_field_decl_list (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.opt
                          (fun v -> trans_where_clause (Run.matcher_token v))
                          v0
                        ,
                        trans_field_declaration_list (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Orde_field_decl_list_opt_where_clause_SEMI (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_ordered_field_declaration_list (Run.matcher_token v0),
                        Run.opt
                          (fun v -> trans_where_clause (Run.matcher_token v))
                          v1
                        ,
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_struct_pattern ((kind, body) : mt) : CST.struct_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Scoped_type_id (
                  trans_scoped_type_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Field_pat (
                            trans_field_pattern (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Rema_field_pat (
                            trans_remaining_field_pattern (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Field_pat (
                                      trans_field_pattern (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Rema_field_pat (
                                      trans_remaining_field_pattern (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_trait_bounds ((kind, body) : mt) : CST.trait_bounds =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Type (
                  trans_type_ (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Life (
                  trans_lifetime (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Higher_ranked_trait_bound (
                  trans_higher_ranked_trait_bound (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Remo_trait_bound (
                  trans_removed_trait_bound (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Type (
                            trans_type_ (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Life (
                            trans_lifetime (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Higher_ranked_trait_bound (
                            trans_higher_ranked_trait_bound (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Remo_trait_bound (
                            trans_removed_trait_bound (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_trait_item ((kind, body) : mt) : CST.trait_item =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7] ->
          (
            Run.opt
              (fun v -> trans_visibility_modifier (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            trans_identifier (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v4
            ,
            Run.opt
              (fun v -> trans_trait_bounds (Run.matcher_token v))
              v5
            ,
            Run.opt
              (fun v -> trans_where_clause (Run.matcher_token v))
              v6
            ,
            trans_declaration_list (Run.matcher_token v7)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_try_block ((kind, body) : mt) : CST.try_block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_block (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_try_expression ((kind, body) : mt) : CST.try_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple_expression ((kind, body) : mt) : CST.tuple_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v -> trans_attribute_item (Run.matcher_token v))
              v1
            ,
            trans_expression (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_expression (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.opt
              (fun v -> trans_expression (Run.matcher_token v))
              v5
            ,
            Run.trans_token (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple_pattern ((kind, body) : mt) : CST.tuple_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Pat (
                            trans_pattern (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Clos_exp (
                            trans_closure_expression (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Pat (
                                      trans_pattern (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Clos_exp (
                                      trans_closure_expression (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple_struct_pattern ((kind, body) : mt) : CST.tuple_struct_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Scoped_id (
                  trans_scoped_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_pattern (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_pattern (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple_type ((kind, body) : mt) : CST.tuple_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_ ((kind, body) : mt) : CST.type_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Abst_type (
            trans_abstract_type (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Ref_type (
            trans_reference_type (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Meta (
            trans_metavariable (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Poin_type (
            trans_pointer_type (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Gene_type (
            trans_generic_type (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Scoped_type_id (
            trans_scoped_type_identifier (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Tuple_type (
            trans_tuple_type (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Unit_type (
            trans_unit_type (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Array_type (
            trans_array_type (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Func_type (
            trans_function_type (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Macro_invo (
            trans_macro_invocation (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `Empty_type (
            trans_empty_type (Run.matcher_token v)
          )
      | Alt (13, v) ->
          `Dyna_type (
            trans_dynamic_type (Run.matcher_token v)
          )
      | Alt (14, v) ->
          `Boun_type (
            trans_bounded_type (Run.matcher_token v)
          )
      | Alt (15, v) ->
          `Choice_u8 (
            (match v with
            | Alt (0, v) ->
                `U8 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `I8 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `U16 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `I16 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `U32 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `I32 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `U64 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `I64 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `U128 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `I128 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Isize (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Usize (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `F32 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `F64 (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `Bool (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Str (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Char (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_arguments ((kind, body) : mt) : CST.type_arguments =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_tok_prec_p1_lt (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Type (
                  trans_type_ (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Type_bind (
                  trans_type_binding (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Life (
                  trans_lifetime (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Lit (
                  trans_literal (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Blk (
                  trans_block (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Type (
                            trans_type_ (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Type_bind (
                            trans_type_binding (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Life (
                            trans_lifetime (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Lit (
                            trans_literal (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Blk (
                            trans_block (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_binding ((kind, body) : mt) : CST.type_binding =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_type_arguments (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            trans_type_ (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_cast_expression ((kind, body) : mt) : CST.type_cast_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_type_ (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_item ((kind, body) : mt) : CST.type_item =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7] ->
          (
            Run.opt
              (fun v -> trans_visibility_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4),
            trans_type_ (Run.matcher_token v5),
            Run.opt
              (fun v -> trans_where_clause (Run.matcher_token v))
              v6
            ,
            Run.trans_token (Run.matcher_token v7)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_parameters ((kind, body) : mt) : CST.type_parameters =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Life (
                  trans_lifetime (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Meta (
                  trans_metavariable (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Cons_type_param (
                  trans_constrained_type_parameter (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Opt_type_param (
                  trans_optional_type_parameter (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Const_param (
                  trans_const_parameter (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Life (
                            trans_lifetime (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Meta (
                            trans_metavariable (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Id (
                            trans_identifier (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Cons_type_param (
                            trans_constrained_type_parameter (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Opt_type_param (
                            trans_optional_type_parameter (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Const_param (
                            trans_const_parameter (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_unary_expression ((kind, body) : mt) : CST.unary_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `DASH (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `STAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `BANG (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_union_item ((kind, body) : mt) : CST.union_item =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.opt
              (fun v -> trans_visibility_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v3
            ,
            Run.opt
              (fun v -> trans_where_clause (Run.matcher_token v))
              v4
            ,
            trans_field_declaration_list (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_unsafe_block ((kind, body) : mt) : CST.unsafe_block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_block (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_use_as_clause ((kind, body) : mt) : CST.use_as_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Self (
                  trans_self (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_u8 (
                  (match v with
                  | Alt (0, v) ->
                      `U8 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `I8 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `U16 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `I16 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `U32 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `I32 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `U64 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `I64 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `U128 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `I128 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Isize (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (11, v) ->
                      `Usize (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `F32 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (13, v) ->
                      `F64 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (14, v) ->
                      `Bool (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (15, v) ->
                      `Str (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (16, v) ->
                      `Char (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Meta (
                  trans_metavariable (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Super (
                  trans_super (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Crate (
                  trans_crate (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Scoped_id (
                  trans_scoped_identifier (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Choice_defa (
                  (match v with
                  | Alt (0, v) ->
                      `Defa (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Union (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_use_clause ((kind, body) : mt) : CST.use_clause =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_self (
            (match v with
            | Alt (0, v) ->
                `Self (
                  trans_self (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_u8 (
                  (match v with
                  | Alt (0, v) ->
                      `U8 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `I8 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `U16 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `I16 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `U32 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `I32 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `U64 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `I64 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `U128 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `I128 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Isize (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (11, v) ->
                      `Usize (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `F32 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (13, v) ->
                      `F64 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (14, v) ->
                      `Bool (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (15, v) ->
                      `Str (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (16, v) ->
                      `Char (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Meta (
                  trans_metavariable (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Super (
                  trans_super (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Crate (
                  trans_crate (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Scoped_id (
                  trans_scoped_identifier (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Choice_defa (
                  (match v with
                  | Alt (0, v) ->
                      `Defa (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Union (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Use_as_clause (
            trans_use_as_clause (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Use_list (
            trans_use_list (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Scoped_use_list (
            trans_scoped_use_list (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Use_wild (
            trans_use_wildcard (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_use_declaration ((kind, body) : mt) : CST.use_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> trans_visibility_modifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_use_clause (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_use_list ((kind, body) : mt) : CST.use_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Use_clause (
                            trans_use_clause (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Use_clause (
                                      trans_use_clause (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_use_wildcard ((kind, body) : mt) : CST.use_wildcard =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Self (
                            trans_self (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Choice_u8 (
                            (match v with
                            | Alt (0, v) ->
                                `U8 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `I8 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `U16 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `I16 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (4, v) ->
                                `U32 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (5, v) ->
                                `I32 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (6, v) ->
                                `U64 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (7, v) ->
                                `I64 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (8, v) ->
                                `U128 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (9, v) ->
                                `I128 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (10, v) ->
                                `Isize (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (11, v) ->
                                `Usize (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (12, v) ->
                                `F32 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (13, v) ->
                                `F64 (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (14, v) ->
                                `Bool (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (15, v) ->
                                `Str (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (16, v) ->
                                `Char (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (2, v) ->
                          `Meta (
                            trans_metavariable (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Super (
                            trans_super (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Crate (
                            trans_crate (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Id (
                            trans_identifier (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Scoped_id (
                            trans_scoped_identifier (Run.matcher_token v)
                          )
                      | Alt (7, v) ->
                          `Choice_defa (
                            (match v with
                            | Alt (0, v) ->
                                `Defa (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Union (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_visibility_modifier ((kind, body) : mt) : CST.visibility_modifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Crate (
            trans_crate (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Pub_opt_LPAR_choice_self_RPAR (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1; v2] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            (match v1 with
                            | Alt (0, v) ->
                                `Self (
                                  trans_self (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Super (
                                  trans_super (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `Crate (
                                  trans_crate (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `In_choice_self (
                                  (match v with
                                  | Seq [v0; v1] ->
                                      (
                                        Run.trans_token (Run.matcher_token v0),
                                        (match v1 with
                                        | Alt (0, v) ->
                                            `Self (
                                              trans_self (Run.matcher_token v)
                                            )
                                        | Alt (1, v) ->
                                            `Choice_u8 (
                                              (match v with
                                              | Alt (0, v) ->
                                                  `U8 (
                                                    Run.trans_token (Run.matcher_token v)
                                                  )
                                              | Alt (1, v) ->
                                                  `I8 (
                                                    Run.trans_token (Run.matcher_token v)
                                                  )
                                              | Alt (2, v) ->
                                                  `U16 (
                                                    Run.trans_token (Run.matcher_token v)
                                                  )
                                              | Alt (3, v) ->
                                                  `I16 (
                                                    Run.trans_token (Run.matcher_token v)
                                                  )
                                              | Alt (4, v) ->
                                                  `U32 (
                                                    Run.trans_token (Run.matcher_token v)
                                                  )
                                              | Alt (5, v) ->
                                                  `I32 (
                                                    Run.trans_token (Run.matcher_token v)
                                                  )
                                              | Alt (6, v) ->
                                                  `U64 (
                                                    Run.trans_token (Run.matcher_token v)
                                                  )
                                              | Alt (7, v) ->
                                                  `I64 (
                                                    Run.trans_token (Run.matcher_token v)
                                                  )
                                              | Alt (8, v) ->
                                                  `U128 (
                                                    Run.trans_token (Run.matcher_token v)
                                                  )
                                              | Alt (9, v) ->
                                                  `I128 (
                                                    Run.trans_token (Run.matcher_token v)
                                                  )
                                              | Alt (10, v) ->
                                                  `Isize (
                                                    Run.trans_token (Run.matcher_token v)
                                                  )
                                              | Alt (11, v) ->
                                                  `Usize (
                                                    Run.trans_token (Run.matcher_token v)
                                                  )
                                              | Alt (12, v) ->
                                                  `F32 (
                                                    Run.trans_token (Run.matcher_token v)
                                                  )
                                              | Alt (13, v) ->
                                                  `F64 (
                                                    Run.trans_token (Run.matcher_token v)
                                                  )
                                              | Alt (14, v) ->
                                                  `Bool (
                                                    Run.trans_token (Run.matcher_token v)
                                                  )
                                              | Alt (15, v) ->
                                                  `Str (
                                                    Run.trans_token (Run.matcher_token v)
                                                  )
                                              | Alt (16, v) ->
                                                  `Char (
                                                    Run.trans_token (Run.matcher_token v)
                                                  )
                                              | _ -> assert false
                                              )
                                            )
                                        | Alt (2, v) ->
                                            `Meta (
                                              trans_metavariable (Run.matcher_token v)
                                            )
                                        | Alt (3, v) ->
                                            `Super (
                                              trans_super (Run.matcher_token v)
                                            )
                                        | Alt (4, v) ->
                                            `Crate (
                                              trans_crate (Run.matcher_token v)
                                            )
                                        | Alt (5, v) ->
                                            `Id (
                                              trans_identifier (Run.matcher_token v)
                                            )
                                        | Alt (6, v) ->
                                            `Scoped_id (
                                              trans_scoped_identifier (Run.matcher_token v)
                                            )
                                        | Alt (7, v) ->
                                            `Choice_defa (
                                              (match v with
                                              | Alt (0, v) ->
                                                  `Defa (
                                                    Run.trans_token (Run.matcher_token v)
                                                  )
                                              | Alt (1, v) ->
                                                  `Union (
                                                    Run.trans_token (Run.matcher_token v)
                                                  )
                                              | _ -> assert false
                                              )
                                            )
                                        | _ -> assert false
                                        )
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                            ,
                            Run.trans_token (Run.matcher_token v2)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_where_clause ((kind, body) : mt) : CST.where_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_where_predicate (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_where_predicate (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_where_predicate ((kind, body) : mt) : CST.where_predicate =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Life (
                  trans_lifetime (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Scoped_type_id (
                  trans_scoped_type_identifier (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Gene_type (
                  trans_generic_type (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Ref_type (
                  trans_reference_type (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Poin_type (
                  trans_pointer_type (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Tuple_type (
                  trans_tuple_type (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Array_type (
                  trans_array_type (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Higher_ranked_trait_bound (
                  trans_higher_ranked_trait_bound (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Choice_u8 (
                  (match v with
                  | Alt (0, v) ->
                      `U8 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `I8 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `U16 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `I16 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `U32 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `I32 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `U64 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `I64 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (8, v) ->
                      `U128 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (9, v) ->
                      `I128 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (10, v) ->
                      `Isize (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (11, v) ->
                      `Usize (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (12, v) ->
                      `F32 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (13, v) ->
                      `F64 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (14, v) ->
                      `Bool (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (15, v) ->
                      `Str (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (16, v) ->
                      `Char (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            trans_trait_bounds (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_while_expression ((kind, body) : mt) : CST.while_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_label (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_condition (Run.matcher_token v2),
            trans_block (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_yield_expression ((kind, body) : mt) : CST.yield_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Yield_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Yield (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false



let trans_semgrep_statement ((kind, body) : mt) : CST.semgrep_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat1
              (fun v -> trans_statement (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_semgrep_expression ((kind, body) : mt) : CST.semgrep_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_source_file ((kind, body) : mt) : CST.source_file =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Opt_sheb_rep_stmt (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.opt
                    (fun v -> trans_shebang (Run.matcher_token v))
                    v0
                  ,
                  Run.repeat
                    (fun v -> trans_statement (Run.matcher_token v))
                    v1
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Semg_exp (
            trans_semgrep_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Semg_stmt (
            trans_semgrep_statement (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

(*
   Costly operation that translates a whole tree or subtree.

   The first pass translates it into a generic tree structure suitable
   to guess which node corresponds to each grammar rule.
   The second pass is a translation into a typed tree where each grammar
   node has its own type.

   This function is called:
   - once on the root of the program after removing extras
     (comments and other nodes that occur anywhere independently from
     the grammar);
   - once of each extra node, resulting in its own independent tree of type
     'extra'.
*)
let translate_tree src node trans_x =
  let matched_tree = Run.match_tree children_regexps src node in
  Option.map trans_x matched_tree


let translate_extra src (node : Tree_sitter_output_t.node) : CST.extra option =
  match node.type_ with
  | "line_comment" ->
      (match translate_tree src node trans_line_comment with
      | None -> None
      | Some x -> Some (`Line_comment (Run.get_loc node, x)))
  | "block_comment" ->
      (match translate_tree src node trans_block_comment with
      | None -> None
      | Some x -> Some (`Block_comment (Run.get_loc node, x)))
  | _ -> None

let translate_root src root_node =
  translate_tree src root_node trans_source_file

let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let opt_program, extras =
     Run.translate
       ~extras
       ~translate_root:(translate_root src)
       ~translate_extra:(translate_extra src)
       orig_root_node
  in
  Parsing_result.create src opt_program extras errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

